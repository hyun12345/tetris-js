{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { createCanvas } from '../settingGame';\nexport const useCanvas = (tentromino, resetTentromino) => {\n  _s();\n\n  const [canvas, setCanvas] = useState(createCanvas());\n  useEffect(() => {\n    const updateCanvas = prevCanvas => {\n      // 1 : flush the canvas\n      const newCanvas = prevCanvas.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell)); // 2 : draw block(tetromino)\n\n      tentromino.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newCanvas[y + tentromino.pos.y][x + tentromino.pos.x] = [value, `${tentromino.collided ? 'merged' : 'clear'}`];\n          }\n        });\n      });\n      return newCanvas;\n    };\n\n    setCanvas(prev => updateCanvas(prev));\n  }, [tentromino]);\n  return [canvas, setCanvas];\n};\n\n_s(useCanvas, \"FgwCVd252FnMutDo9pGp7j1Vch0=\");","map":{"version":3,"sources":["C:/jah-workspace/tetris-js/react-js/src/hooks/useCanvas.js"],"names":["useState","useEffect","createCanvas","useCanvas","tentromino","resetTentromino","canvas","setCanvas","updateCanvas","prevCanvas","newCanvas","map","row","cell","tetromino","forEach","y","value","x","pos","collided","prev"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,OAAO,MAAMC,SAAS,GAAG,CAACC,UAAD,EAAaC,eAAb,KAAiC;AAAA;;AACtD,QAAK,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAACE,YAAY,EAAb,CAAnC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMO,YAAY,GAAGC,UAAU,IAAI;AAC/B;AACA,YAAMC,SAAS,GAAGD,UAAU,CAACE,GAAX,CAAeC,GAAG,IAChCA,GAAG,CAACD,GAAJ,CAAQE,IAAI,IAAKA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAZ,GAAsB,CAAC,CAAD,EAAI,OAAJ,CAAtB,GAAqCA,IAAtD,CADc,CAAlB,CAF+B,CAM/B;;AACAT,MAAAA,UAAU,CAACU,SAAX,CAAqBC,OAArB,CAA6B,CAACH,GAAD,EAAMI,CAAN,KAAY;AACrCJ,QAAAA,GAAG,CAACG,OAAJ,CAAY,CAACE,KAAD,EAAQC,CAAR,KAAc;AACtB,cAAID,KAAK,KAAK,CAAd,EAAiB;AACbP,YAAAA,SAAS,CAACM,CAAC,GAAGZ,UAAU,CAACe,GAAX,CAAeH,CAApB,CAAT,CAAgCE,CAAC,GAAGd,UAAU,CAACe,GAAX,CAAeD,CAAnD,IAAwD,CACpDD,KADoD,EAEnD,GAAEb,UAAU,CAACgB,QAAX,GAAsB,QAAtB,GAAiC,OAAQ,EAFQ,CAAxD;AAIH;AACJ,SAPD;AAQH,OATD;AAWA,aAAOV,SAAP;AACH,KAnBD;;AAqBAH,IAAAA,SAAS,CAACc,IAAI,IAAIb,YAAY,CAACa,IAAD,CAArB,CAAT;AACH,GAvBQ,EAuBN,CAACjB,UAAD,CAvBM,CAAT;AAyBA,SAAO,CAACE,MAAD,EAASC,SAAT,CAAP;AACH,CA7BM;;GAAMJ,S","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { createCanvas } from '../settingGame';\r\n\r\nexport const useCanvas = (tentromino, resetTentromino) => {\r\n    const[canvas, setCanvas] = useState(createCanvas());\r\n\r\n    useEffect(() => {\r\n        const updateCanvas = prevCanvas => {\r\n            // 1 : flush the canvas\r\n            const newCanvas = prevCanvas.map(row => \r\n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\r\n            );\r\n\r\n            // 2 : draw block(tetromino)\r\n            tentromino.tetromino.forEach((row, y) => {\r\n                row.forEach((value, x) => {\r\n                    if (value !== 0) {\r\n                        newCanvas[y + tentromino.pos.y][x + tentromino.pos.x] = [\r\n                            value,\r\n                            `${tentromino.collided ? 'merged' : 'clear'}`,\r\n                        ]\r\n                    }\r\n                });\r\n            });\r\n\r\n            return newCanvas;\r\n        };\r\n\r\n        setCanvas(prev => updateCanvas(prev));\r\n    }, [tentromino]);\r\n\r\n    return [canvas, setCanvas];\r\n}"]},"metadata":{},"sourceType":"module"}