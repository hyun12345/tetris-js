{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from 'react';\nimport { CANVAS_WIDTH } from '../settingGame';\nimport { TETROMINOS, setBlock } from '../tetrominos';\nexport const usePlayer = () => {\n  _s();\n\n  const [player, setPlayer] = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    collided: false\n  });\n\n  const updatePlayerPos = ({\n    x,\n    y,\n    collided\n  }) => {\n    setPlayer(prev => ({ ...prev,\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      collided\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {\n        x: CANVAS_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: setBlock().shape,\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer];\n};\n\n_s(usePlayer, \"p3Bw5MuB1i8Q1KDI/3gGhDkHAiw=\");","map":{"version":3,"sources":["C:/jah-workspace/tetris-js/react-js/src/hooks/usePlayer.js"],"names":["useState","useCallback","CANVAS_WIDTH","TETROMINOS","setBlock","usePlayer","player","setPlayer","pos","x","y","tetromino","shape","collided","updatePlayerPos","prev","resetPlayer"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,eAArC;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAC3B,QAAK,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC;AAChCQ,IAAAA,GAAG,EAAE;AAACC,MAAAA,CAAC,EAAC,CAAH;AAAMC,MAAAA,CAAC,EAAC;AAAR,KAD2B;AAEhCC,IAAAA,SAAS,EAAER,UAAU,CAAC,CAAD,CAAV,CAAcS,KAFO;AAGhCC,IAAAA,QAAQ,EAAE;AAHsB,GAAD,CAAnC;;AAMA,QAAMC,eAAe,GAAG,CAAC;AAACL,IAAAA,CAAD;AAAIC,IAAAA,CAAJ;AAAOG,IAAAA;AAAP,GAAD,KAAsB;AAC1CN,IAAAA,SAAS,CAACQ,IAAI,KAAK,EACf,GAAGA,IADY;AAEfP,MAAAA,GAAG,EAAC;AAACC,QAAAA,CAAC,EAAEM,IAAI,CAACP,GAAL,CAASC,CAAT,IAAcA,CAAlB;AAAsBC,QAAAA,CAAC,EAAEK,IAAI,CAACP,GAAL,CAASE,CAAT,IAAcA;AAAvC,OAFW;AAGfG,MAAAA;AAHe,KAAL,CAAL,CAAT;AAKH,GAND;;AAQA,QAAMG,WAAW,GAAGf,WAAW,CAAC,MAAM;AAClCM,IAAAA,SAAS,CAAC;AACNC,MAAAA,GAAG,EAAE;AAACC,QAAAA,CAAC,EAAGP,YAAY,GAAG,CAAhB,GAAsB,CAA1B;AAA8BQ,QAAAA,CAAC,EAAC;AAAhC,OADC;AAENC,MAAAA,SAAS,EAAEP,QAAQ,GAAGQ,KAFhB;AAGNC,MAAAA,QAAQ,EAAE;AAHJ,KAAD,CAAT;AAKH,GAN8B,EAM5B,EAN4B,CAA/B;AAQA,SAAO,CAACP,MAAD,EAASQ,eAAT,EAA0BE,WAA1B,CAAP;AACH,CAxBM;;GAAMX,S","sourcesContent":["import { useState, useCallback } from 'react';\r\nimport { CANVAS_WIDTH } from '../settingGame';\r\nimport { TETROMINOS, setBlock } from '../tetrominos';\r\n\r\nexport const usePlayer = () => {\r\n    const[player, setPlayer] = useState({\r\n        pos: {x:0, y:0},\r\n        tetromino: TETROMINOS[0].shape,\r\n        collided: false\r\n    });\r\n\r\n    const updatePlayerPos = ({x, y, collided}) => {\r\n        setPlayer(prev => ({\r\n            ...prev,\r\n            pos:{x:(prev.pos.x += x), y:(prev.pos.y += y)},\r\n            collided,\r\n        }));\r\n    }\r\n\r\n    const resetPlayer = useCallback(() => {\r\n        setPlayer({\r\n            pos: {x:((CANVAS_WIDTH / 2 ) - 2), y:0},\r\n            tetromino: setBlock().shape,\r\n            collided: false\r\n        })\r\n    }, []);\r\n\r\n    return [player, updatePlayerPos, resetPlayer];\r\n}"]},"metadata":{},"sourceType":"module"}