{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { createCanvas } from '../settingGame';\nexport const useCanvas = (current, resetCurrent) => {\n  _s();\n\n  const [canvas, setCanvas] = useState(createCanvas());\n  const [rowsCleared, setRowsCleared] = useState(0);\n  useEffect(() => {\n    setRowsCleared(0);\n\n    const sweepRows = newCanvas => // acc : accumulator\n    newCanvas.reduce((acc, row) => {\n      if (acc == undefined) {\n        acc = [];\n      }\n\n      if (row.findIndex(cell => cell[0] === 0) === -1) {\n        setRowsCleared(prev => prev + 1);\n        acc.unshift(new Array(newCanvas[0].length).fill([0, 'clear']));\n        return acc;\n      }\n\n      acc.push(row);\n      return acc;\n    }, []); // compare with prevCanvas\n\n\n    const updateCanvas = prevCanvas => {\n      // 1 : flush the canvas\n      const newCanvas = prevCanvas.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell)); // 2 : draw tetromino\n\n      current.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newCanvas[y + current.pos.y][x + current.pos.x] = [value, `${current.collided ? 'merged' : 'clear'}`];\n          }\n        });\n      }); // check if collided or not\n\n      if (current.collided) {\n        resetCurrent();\n        return sweepRows(newCanvas);\n      }\n\n      return newCanvas;\n    };\n\n    setCanvas(prev => updateCanvas(prev));\n  }, [current, resetCurrent]);\n  return [canvas, setCanvas, rowsCleared];\n};\n\n_s(useCanvas, \"01qeW7toOEGm+SAJf12G+DlmaI8=\");","map":{"version":3,"sources":["C:/jah-workspace/tetris-js/react-js/src/hooks/useCanvas.js"],"names":["useState","useEffect","createCanvas","useCanvas","current","resetCurrent","canvas","setCanvas","rowsCleared","setRowsCleared","sweepRows","newCanvas","reduce","acc","row","undefined","findIndex","cell","prev","unshift","Array","length","fill","push","updateCanvas","prevCanvas","map","tetromino","forEach","y","value","x","pos","collided"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,OAAO,MAAMC,SAAS,GAAG,CAACC,OAAD,EAAUC,YAAV,KAA2B;AAAA;;AAChD,QAAK,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAACE,YAAY,EAAb,CAAnC;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,CAAD,CAA9C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,cAAc,CAAC,CAAD,CAAd;;AAEA,UAAMC,SAAS,GAAGC,SAAS,IACvB;AACAA,IAAAA,SAAS,CAACC,MAAV,CAAiB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC3B,UAAID,GAAG,IAAIE,SAAX,EAAsB;AAClBF,QAAAA,GAAG,GAAG,EAAN;AACH;;AACD,UAAIC,GAAG,CAACE,SAAJ,CAAcC,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,CAAlC,MAAyC,CAAC,CAA9C,EAAiD;AAC7CR,QAAAA,cAAc,CAACS,IAAI,IAAIA,IAAI,GAAG,CAAhB,CAAd;AACAL,QAAAA,GAAG,CAACM,OAAJ,CAAY,IAAIC,KAAJ,CAAUT,SAAS,CAAC,CAAD,CAAT,CAAaU,MAAvB,EAA+BC,IAA/B,CAAoC,CAAC,CAAD,EAAI,OAAJ,CAApC,CAAZ;AAEA,eAAOT,GAAP;AACH;;AACDA,MAAAA,GAAG,CAACU,IAAJ,CAAST,GAAT;AACA,aAAOD,GAAP;AACH,KAZD,EAYG,EAZH,CAFJ,CAHY,CAmBZ;;;AACA,UAAMW,YAAY,GAAGC,UAAU,IAAI;AAC/B;AACA,YAAMd,SAAS,GAAGc,UAAU,CAACC,GAAX,CAAeZ,GAAG,IAChCA,GAAG,CAACY,GAAJ,CAAQT,IAAI,IAAKA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAZ,GAAsB,CAAC,CAAD,EAAI,OAAJ,CAAtB,GAAqCA,IAAtD,CADc,CAAlB,CAF+B,CAM/B;;AACAb,MAAAA,OAAO,CAACuB,SAAR,CAAkBC,OAAlB,CAA0B,CAACd,GAAD,EAAMe,CAAN,KAAY;AAClCf,QAAAA,GAAG,CAACc,OAAJ,CAAY,CAACE,KAAD,EAAQC,CAAR,KAAc;AACtB,cAAID,KAAK,KAAK,CAAd,EAAiB;AACbnB,YAAAA,SAAS,CAACkB,CAAC,GAAGzB,OAAO,CAAC4B,GAAR,CAAYH,CAAjB,CAAT,CAA6BE,CAAC,GAAG3B,OAAO,CAAC4B,GAAR,CAAYD,CAA7C,IAAkD,CAC9CD,KAD8C,EAE7C,GAAE1B,OAAO,CAAC6B,QAAR,GAAmB,QAAnB,GAA8B,OAAQ,EAFK,CAAlD;AAIH;AACJ,SAPD;AAQH,OATD,EAP+B,CAkB/B;;AACA,UAAI7B,OAAO,CAAC6B,QAAZ,EAAsB;AAClB5B,QAAAA,YAAY;AACZ,eAAOK,SAAS,CAACC,SAAD,CAAhB;AACH;;AAED,aAAOA,SAAP;AACH,KAzBD;;AA2BAJ,IAAAA,SAAS,CAACW,IAAI,IAAIM,YAAY,CAACN,IAAD,CAArB,CAAT;AACH,GAhDQ,EAgDN,CAACd,OAAD,EAAUC,YAAV,CAhDM,CAAT;AAkDA,SAAO,CAACC,MAAD,EAASC,SAAT,EAAoBC,WAApB,CAAP;AACH,CAvDM;;GAAML,S","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { createCanvas } from '../settingGame';\r\n\r\nexport const useCanvas = (current, resetCurrent) => {\r\n    const[canvas, setCanvas] = useState(createCanvas());\r\n    const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setRowsCleared(0);\r\n\r\n        const sweepRows = newCanvas => \r\n            // acc : accumulator\r\n            newCanvas.reduce((acc, row) => {\r\n                if (acc == undefined) {\r\n                    acc = [];\r\n                }\r\n                if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n                    setRowsCleared(prev => prev + 1);\r\n                    acc.unshift(new Array(newCanvas[0].length).fill([0, 'clear']));\r\n                    \r\n                    return acc;\r\n                }\r\n                acc.push(row);\r\n                return acc;\r\n            }, []);\r\n        \r\n        // compare with prevCanvas\r\n        const updateCanvas = prevCanvas => {\r\n            // 1 : flush the canvas\r\n            const newCanvas = prevCanvas.map(row => \r\n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\r\n            );\r\n\r\n            // 2 : draw tetromino\r\n            current.tetromino.forEach((row, y) => {\r\n                row.forEach((value, x) => {\r\n                    if (value !== 0) {\r\n                        newCanvas[y + current.pos.y][x + current.pos.x] = [\r\n                            value,\r\n                            `${current.collided ? 'merged' : 'clear'}`,\r\n                        ]\r\n                    }\r\n                });\r\n            });\r\n            \r\n            // check if collided or not\r\n            if (current.collided) {\r\n                resetCurrent();\r\n                return sweepRows(newCanvas);\r\n            }\r\n\r\n            return newCanvas;\r\n        };\r\n\r\n        setCanvas(prev => updateCanvas(prev));\r\n    }, [current, resetCurrent]);\r\n\r\n    return [canvas, setCanvas, rowsCleared];\r\n}"]},"metadata":{},"sourceType":"module"}