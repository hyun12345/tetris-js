{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { createCanvas } from '../settingGame';\nexport const useCanvas = (current, resetCurrent) => {\n  _s();\n\n  const [canvas, setCanvas] = useState(createCanvas());\n  const [rowsCleared, setRowsCleared] = useState(0);\n  useEffect(() => {\n    setRowsCleared(0);\n\n    const sweepRows = newCanvas => {\n      // // array.reduce() testing\n      // let arr = [\n      //     [[0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear']],\n      //     [[0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear']],\n      //     [[0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear']],\n      //     [[0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear']],\n      //     [[0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear']]\n      // ];\n      // arr.reduce((acc, row) => {\n      //     console.log({acc:acc});\n      //     console.log({row:row});\n      //     acc.unshift(new Array(arr[0].length).fill(['O', 'merged']));\n      //     console.log({accc:acc});\n      // });\n      // console.log({newCanvas:newCanvas});\n      // acc : accumulator\n      newCanvas.reduce((acc, row) => {\n        console.log({\n          acc: acc\n        });\n        console.log({\n          row: row\n        });\n        console.log({\n          unshift: new Array(newCanvas[0].length).fill([0, 'clear'])\n        });\n\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\n          setRowsCleared(prev => prev + 1);\n          acc.unshift(new Array(newCanvas[0].length).fill([0, 'clear']));\n          console.log({\n            if: acc\n          }); //     // return acc;\n        } // acc.push(row);\n        // console.log({else:acc})\n        // return acc;\n\n      }, []);\n    }; // compare with prevCanvas\n\n\n    const updateCanvas = prevCanvas => {\n      // 1 : flush the canvas\n      const newCanvas = prevCanvas.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell)); // 2 : draw tetromino\n\n      current.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newCanvas[y + current.pos.y][x + current.pos.x] = [value, `${current.collided ? 'merged' : 'clear'}`];\n          }\n        });\n      }); // check if collided or not\n\n      if (current.collided) {\n        resetCurrent();\n        sweepRows(newCanvas); // return sweepRows(newCanvas);\n      }\n\n      return newCanvas;\n    };\n\n    setCanvas(prev => updateCanvas(prev));\n  }, [current, resetCurrent]);\n  return [canvas, setCanvas];\n};\n\n_s(useCanvas, \"01qeW7toOEGm+SAJf12G+DlmaI8=\");","map":{"version":3,"sources":["C:/jah-workspace/tetris-js/react-js/src/hooks/useCanvas.js"],"names":["useState","useEffect","createCanvas","useCanvas","current","resetCurrent","canvas","setCanvas","rowsCleared","setRowsCleared","sweepRows","newCanvas","reduce","acc","row","console","log","unshift","Array","length","fill","findIndex","cell","prev","if","updateCanvas","prevCanvas","map","tetromino","forEach","y","value","x","pos","collided"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { createCanvas } from '../settingGame';\r\n\r\nexport const useCanvas = (current, resetCurrent) => {\r\n    const[canvas, setCanvas] = useState(createCanvas());\r\n    const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setRowsCleared(0);\r\n\r\n        const sweepRows = newCanvas => {\r\n            // // array.reduce() testing\r\n            // let arr = [\r\n            //     [[0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear']],\r\n            //     [[0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear']],\r\n            //     [[0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear']],\r\n            //     [[0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear']],\r\n            //     [[0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear'], [0, 'clear']]\r\n            // ];\r\n            // arr.reduce((acc, row) => {\r\n            //     console.log({acc:acc});\r\n            //     console.log({row:row});\r\n            //     acc.unshift(new Array(arr[0].length).fill(['O', 'merged']));\r\n            //     console.log({accc:acc});\r\n            // });\r\n\r\n            // console.log({newCanvas:newCanvas});\r\n            // acc : accumulator\r\n            newCanvas.reduce((acc, row) => {\r\n                console.log({acc:acc});\r\n                console.log({row:row});\r\n                console.log({unshift:new Array(newCanvas[0].length).fill([0, 'clear'])});\r\n                if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n                    setRowsCleared(prev => prev + 1);\r\n                    acc.unshift(new Array(newCanvas[0].length).fill([0, 'clear']));\r\n                    console.log({if:acc})\r\n                //     // return acc;\r\n                }\r\n                // acc.push(row);\r\n                // console.log({else:acc})\r\n                // return acc;\r\n            }, []);\r\n        }\r\n\r\n        \r\n\r\n        // compare with prevCanvas\r\n        const updateCanvas = prevCanvas => {\r\n            // 1 : flush the canvas\r\n            const newCanvas = prevCanvas.map(row => \r\n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\r\n            );\r\n\r\n            // 2 : draw tetromino\r\n            current.tetromino.forEach((row, y) => {\r\n                row.forEach((value, x) => {\r\n                    if (value !== 0) {\r\n                        newCanvas[y + current.pos.y][x + current.pos.x] = [\r\n                            value,\r\n                            `${current.collided ? 'merged' : 'clear'}`,\r\n                        ]\r\n                    }\r\n                });\r\n            });\r\n            // check if collided or not\r\n            if (current.collided) {\r\n                resetCurrent();\r\n                sweepRows(newCanvas);\r\n                // return sweepRows(newCanvas);\r\n            }\r\n\r\n            return newCanvas;\r\n        };\r\n\r\n        setCanvas(prev => updateCanvas(prev));\r\n    }, [current, resetCurrent]);\r\n\r\n    return [canvas, setCanvas];\r\n}"]},"metadata":{},"sourceType":"module"}