{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from 'react';\nimport { CANVAS_WIDTH } from '../settingGame';\nimport { BLOCK } from '../tetrominos';\nexport const usePlayer = () => {\n  _s();\n\n  console.log(BLOCK);\n  const [player, setPlayer] = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: BLOCK,\n    collided: false\n  });\n\n  const updatePlayerPos = ({\n    x,\n    y,\n    collided\n  }) => {\n    setPlayer(prev => ({ ...prev,\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y\n      },\n      collided\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {\n        x: CANVAS_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: BLOCK,\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer];\n};\n\n_s(usePlayer, \"xGJsJ7bwPYH1GwwTn9vAxr/f4a0=\");","map":{"version":3,"sources":["C:/jah-workspace/tetris-js/react-js/src/hooks/usePlayer.js"],"names":["useState","useCallback","CANVAS_WIDTH","BLOCK","usePlayer","console","log","player","setPlayer","pos","x","y","tetromino","collided","updatePlayerPos","prev","resetPlayer"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,KAAT,QAAsB,eAAtB;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAC3BC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACA,QAAK,CAACI,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC;AAChCS,IAAAA,GAAG,EAAE;AAACC,MAAAA,CAAC,EAAC,CAAH;AAAMC,MAAAA,CAAC,EAAC;AAAR,KAD2B;AAEhCC,IAAAA,SAAS,EAAET,KAFqB;AAGhCU,IAAAA,QAAQ,EAAE;AAHsB,GAAD,CAAnC;;AAMA,QAAMC,eAAe,GAAG,CAAC;AAACJ,IAAAA,CAAD;AAAIC,IAAAA,CAAJ;AAAOE,IAAAA;AAAP,GAAD,KAAsB;AAC1CL,IAAAA,SAAS,CAACO,IAAI,KAAK,EACf,GAAGA,IADY;AAEfN,MAAAA,GAAG,EAAC;AAACC,QAAAA,CAAC,EAAEK,IAAI,CAACN,GAAL,CAASC,CAAT,IAAcA,CAAlB;AAAsBC,QAAAA,CAAC,EAAEI,IAAI,CAACN,GAAL,CAASE,CAAT,IAAcA;AAAvC,OAFW;AAGfE,MAAAA;AAHe,KAAL,CAAL,CAAT;AAKH,GAND;;AAQA,QAAMG,WAAW,GAAGf,WAAW,CAAC,MAAM;AAClCO,IAAAA,SAAS,CAAC;AACNC,MAAAA,GAAG,EAAE;AAACC,QAAAA,CAAC,EAAGR,YAAY,GAAG,CAAhB,GAAsB,CAA1B;AAA8BS,QAAAA,CAAC,EAAC;AAAhC,OADC;AAENC,MAAAA,SAAS,EAAET,KAFL;AAGNU,MAAAA,QAAQ,EAAE;AAHJ,KAAD,CAAT;AAKH,GAN8B,EAM5B,EAN4B,CAA/B;AAQA,SAAO,CAACN,MAAD,EAASO,eAAT,EAA0BE,WAA1B,CAAP;AACH,CAzBM;;GAAMZ,S","sourcesContent":["import { useState, useCallback } from 'react';\r\nimport { CANVAS_WIDTH } from '../settingGame';\r\nimport { BLOCK } from '../tetrominos';\r\n\r\nexport const usePlayer = () => {\r\n    console.log(BLOCK)\r\n    const[player, setPlayer] = useState({\r\n        pos: {x:0, y:0},\r\n        tetromino: BLOCK,\r\n        collided: false\r\n    });\r\n\r\n    const updatePlayerPos = ({x, y, collided}) => {\r\n        setPlayer(prev => ({\r\n            ...prev,\r\n            pos:{x:(prev.pos.x += x), y:(prev.pos.y += y)},\r\n            collided,\r\n        }));\r\n    }\r\n\r\n    const resetPlayer = useCallback(() => {\r\n        setPlayer({\r\n            pos: {x:((CANVAS_WIDTH / 2 ) - 2), y:0},\r\n            tetromino: BLOCK,\r\n            collided: false\r\n        })\r\n    }, []);\r\n\r\n    return [player, updatePlayerPos, resetPlayer];\r\n}"]},"metadata":{},"sourceType":"module"}