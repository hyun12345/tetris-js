{"ast":null,"code":"var _jsxFileName = \"C:\\\\jah-workspace\\\\tetris-js\\\\react-js\\\\src\\\\components\\\\Tetris.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { createCanvas, checkCollision } from '../settingGame'; // styled-components\n\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris'; // custom hooks\n// useInterval hooks from https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useInterval } from '../hooks/useInterval';\nimport { useCurrent } from '../hooks/useCurrent';\nimport { useCanvas } from '../hooks/useCanvas'; // components\n\nimport Canvas from './Canvas';\nimport Display from './Display';\nimport StartButton from './StartButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Tetris = () => {\n  _s();\n\n  const [dropTime, setDropTime] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n  const [current, updateCurrentPos, resetCurrent] = useCurrent();\n  const [canvas, setCanvas] = useCanvas(current, resetCurrent);\n  console.log('re-render');\n\n  const moveCurrent = dir => {\n    if (!checkCollision(current, canvas, {\n      x: dir,\n      y: 0\n    })) {\n      updateCurrentPos({\n        x: dir,\n        y: 0\n      });\n    }\n  }; // set(reset) game\n\n\n  const startGame = () => {\n    setCanvas(createCanvas());\n    setDropTime(1000);\n    resetCurrent();\n    setGameOver(false);\n  };\n\n  const drop = () => {\n    if (!checkCollision(current, canvas, {\n      x: 0,\n      y: 1\n    })) {\n      updateCurrentPos({\n        x: 0,\n        y: 1,\n        collided: false\n      });\n    } else {\n      // game over\n      if (current.pos.y < 1) {\n        setGameOver(true);\n        setDropTime(null);\n      }\n\n      updateCurrentPos({\n        x: 0,\n        y: 0,\n        collided: true\n      });\n    }\n  };\n\n  const dropCurrent = () => {\n    drop();\n  }; // update keyCode to mouseOver later\n\n\n  const move = ({\n    keyCode\n  }) => {\n    if (!gameOver) {\n      if (keyCode === 37) {\n        moveCurrent(-1);\n      } else if (keyCode === 39) {\n        moveCurrent(1);\n      } else if (keyCode === 40) {\n        dropCurrent();\n      }\n    }\n  };\n\n  useInterval(() => {\n    drop();\n  }, dropTime);\n  return /*#__PURE__*/_jsxDEV(StyledTetrisWrapper, {\n    role: \"button\",\n    tabIndex: \"0\",\n    onKeyDown: e => move(e),\n    children: /*#__PURE__*/_jsxDEV(StyledTetris, {\n      children: [/*#__PURE__*/_jsxDEV(Canvas, {\n        canvas: canvas\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n        children: [gameOver ? /*#__PURE__*/_jsxDEV(Display, {\n          gameOver: gameOver,\n          text: \"Game Over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Display, {\n            text: \"Score\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Display, {\n            text: \"Rows\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(StartButton, {\n          callback: startGame\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Tetris, \"KN/zfhG/mLfL3orKDv24slRVZsM=\", false, function () {\n  return [useCurrent, useCanvas, useInterval];\n});\n\n_c = Tetris;\nexport default Tetris;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tetris\");","map":{"version":3,"sources":["C:/jah-workspace/tetris-js/react-js/src/components/Tetris.js"],"names":["React","useState","createCanvas","checkCollision","StyledTetrisWrapper","StyledTetris","useInterval","useCurrent","useCanvas","Canvas","Display","StartButton","Tetris","dropTime","setDropTime","gameOver","setGameOver","current","updateCurrentPos","resetCurrent","canvas","setCanvas","console","log","moveCurrent","dir","x","y","startGame","drop","collided","pos","dropCurrent","move","keyCode","e"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport { createCanvas, checkCollision } from '../settingGame';\r\n\r\n// styled-components\r\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\r\n\r\n// custom hooks\r\n// useInterval hooks from https://overreacted.io/making-setinterval-declarative-with-react-hooks/\r\nimport { useInterval } from '../hooks/useInterval';\r\nimport { useCurrent } from '../hooks/useCurrent';\r\nimport { useCanvas } from '../hooks/useCanvas';\r\n\r\n// components\r\nimport Canvas from './Canvas';\r\nimport Display from './Display';\r\nimport StartButton from './StartButton';\r\n\r\nconst Tetris = () => {\r\n    const [dropTime, setDropTime] = useState(null);\r\n    const [gameOver, setGameOver] = useState(false);\r\n\r\n    const [current, updateCurrentPos, resetCurrent] = useCurrent();\r\n    const [canvas, setCanvas] = useCanvas(current, resetCurrent);\r\n\r\n    console.log('re-render');\r\n\r\n    const moveCurrent = (dir) => {\r\n        if (!checkCollision(current, canvas, {x:dir, y:0})) {\r\n            updateCurrentPos({x:dir, y:0});\r\n        }\r\n    }\r\n    \r\n    // set(reset) game\r\n    const startGame = () => {\r\n        setCanvas(createCanvas());\r\n        setDropTime(1000);\r\n        resetCurrent();\r\n        setGameOver(false);\r\n    }\r\n\r\n    const drop = () => {\r\n        if (!checkCollision(current, canvas, {x:0, y:1})) {\r\n            updateCurrentPos({x:0, y:1, collided:false});\r\n        } else {\r\n            // game over\r\n            if (current.pos.y < 1) {\r\n                setGameOver(true);\r\n                setDropTime(null);\r\n            }\r\n            updateCurrentPos({x:0, y:0, collided:true});\r\n        }\r\n    }\r\n\r\n    const dropCurrent = () => {\r\n        drop();\r\n    }\r\n\r\n    // update keyCode to mouseOver later\r\n    const move = ({keyCode}) => {\r\n        if (!gameOver) {\r\n            if (keyCode === 37) {\r\n                moveCurrent(-1);\r\n            } else if (keyCode === 39) {\r\n                moveCurrent(1);\r\n            } else if (keyCode === 40) {\r\n                dropCurrent();\r\n            }\r\n        }\r\n    }\r\n\r\n    useInterval(() => {\r\n        drop();\r\n    }, dropTime);\r\n\r\n    return (\r\n        <StyledTetrisWrapper role=\"button\" tabIndex=\"0\" onKeyDown={e => move(e)}>\r\n            <StyledTetris>\r\n                <Canvas canvas={canvas} />\r\n                <aside>\r\n                    {gameOver ? (\r\n                        <Display gameOver={gameOver} text=\"Game Over\" />\r\n                    ): (\r\n                        <div>\r\n                            <Display text=\"Score\" />\r\n                            <Display text=\"Rows\" />\r\n                        </div>\r\n                    )}\r\n                    <StartButton callback={startGame} />\r\n                </aside>\r\n            </StyledTetris>\r\n        </StyledTetrisWrapper>\r\n    )\r\n}\r\n\r\nexport default Tetris;"]},"metadata":{},"sourceType":"module"}