{"ast":null,"code":"import _slicedToArray from \"C:/jah-workspace/tetris-js/react-js/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\jah-workspace\\\\tetris-js\\\\react-js\\\\src\\\\components\\\\views\\\\Tetris\\\\Tetris.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { createCanvas, checkCollision } from '../../../settingGame'; // styled-components\n\nimport { StyledTetrisWrapper, StyledTetris } from '../../styles/StyledTetris'; // custom hooks\n// useInterval hooks from https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useInterval } from '../../../_hooks/useInterval';\nimport { useCurrent } from '../../../_hooks/useCurrent';\nimport { useCanvas } from '../../../_hooks/useCanvas';\nimport { useGameStatus } from '../../../_hooks/useGameStatus'; // components\n\nimport Canvas from '../Canvas/Canvas';\nimport Display from '../Display/Display';\nimport StartButton from '../StartButton/StartButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Tetris = function Tetris() {\n  _s();\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      dropTime = _useState2[0],\n      setDropTime = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      gameOver = _useState4[0],\n      setGameOver = _useState4[1];\n\n  var _useCurrent = useCurrent(),\n      _useCurrent2 = _slicedToArray(_useCurrent, 3),\n      current = _useCurrent2[0],\n      updateCurrentPos = _useCurrent2[1],\n      resetCurrent = _useCurrent2[2];\n\n  var _useCanvas = useCanvas(current, resetCurrent),\n      _useCanvas2 = _slicedToArray(_useCanvas, 3),\n      canvas = _useCanvas2[0],\n      setCanvas = _useCanvas2[1],\n      rowsCleared = _useCanvas2[2];\n\n  var _useGameStatus = useGameStatus(rowsCleared),\n      _useGameStatus2 = _slicedToArray(_useGameStatus, 6),\n      score = _useGameStatus2[0],\n      setScore = _useGameStatus2[1],\n      rows = _useGameStatus2[2],\n      setRows = _useGameStatus2[3],\n      level = _useGameStatus2[4],\n      setLevel = _useGameStatus2[5];\n\n  var moveCurrent = function moveCurrent(dir) {\n    if (!checkCollision(current, canvas, {\n      x: dir,\n      y: 0\n    })) {\n      updateCurrentPos({\n        x: dir,\n        y: 0\n      });\n    }\n  }; // set(reset) game\n\n\n  var startGame = function startGame() {\n    setCanvas(createCanvas());\n    setDropTime(1000);\n    resetCurrent();\n    setGameOver(false);\n    setScore(0);\n    setRows(0);\n    setLevel(0);\n  };\n\n  var drop = function drop() {\n    // increate level when cleared 10 rows\n    if (rows > (level + 1) * 10) {\n      setLevel(function (prev) {\n        return prev + 1;\n      }); /// increase speed when level increased\n\n      setDropTime(1000 / (level + 1) + 100);\n    } // not collided : to drop the block\n\n\n    if (!checkCollision(current, canvas, {\n      x: 0,\n      y: 1\n    })) {\n      updateCurrentPos({\n        x: 0,\n        y: 1,\n        collided: false\n      }); // collided : game over\n    } else {\n      // game over\n      if (current.pos.y < 1) {\n        setGameOver(true);\n        setDropTime(null);\n      }\n\n      updateCurrentPos({\n        x: 0,\n        y: 0,\n        collided: true\n      });\n    }\n  };\n\n  var move = function move(event) {\n    var bounds = event.target.getBoundingClientRect();\n    var cellSize = bounds.width;\n    var canvas = document.getElementById('canvas');\n    var offsetLeft = canvas.offsetLeft;\n    var offsetWidth = canvas.offsetWidth;\n    var clientX = event.clientX - offsetLeft;\n\n    if (!gameOver) {\n      if (clientX >= 0 && clientX < offsetWidth - cellSize) {\n        if (cellSize < offsetWidth / 10) {\n          var currentMouse = Math.round(clientX / cellSize);\n\n          if (currentMouse !== current.pos.x) {\n            // console.log({currentMouse:currentMouse, current:current.pos.x});\n            // to the left\n            if (currentMouse < current.pos.x) {\n              // console.log({l_currentMouse:currentMouse, l_current:current.pos.x});\n              moveCurrent(-1); // to the right\n            } else if (currentMouse > current.pos.x) {\n              // console.log({r_currentMouse:currentMouse, r_current:current.pos.x});\n              moveCurrent(1);\n            }\n          }\n        }\n      }\n    }\n  };\n\n  useInterval(function () {\n    drop();\n  }, dropTime);\n  return /*#__PURE__*/_jsxDEV(StyledTetrisWrapper, {\n    role: \"button\",\n    tabIndex: \"0\",\n    children: /*#__PURE__*/_jsxDEV(StyledTetris, {\n      children: [/*#__PURE__*/_jsxDEV(Canvas, {\n        id: 'canvas',\n        canvas: canvas,\n        callback: function callback(e) {\n          return move(e);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"aside\", {\n        children: [gameOver && /*#__PURE__*/_jsxDEV(Display, {\n          gameOver: gameOver,\n          text: \"Game Over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 34\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Display, {\n            text: \"Score: \".concat(score)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 25\n          }, _this), /*#__PURE__*/_jsxDEV(Display, {\n            text: \"rows: \".concat(rows)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 25\n          }, _this), /*#__PURE__*/_jsxDEV(Display, {\n            text: \"Level: \".concat(level)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 25\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(StartButton, {\n          callback: startGame\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(Tetris, \"wZuk51RPkSRGrVyGDCwFEHQe/7A=\", false, function () {\n  return [useCurrent, useCanvas, useGameStatus, useInterval];\n});\n\n_c = Tetris;\nexport default Tetris;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tetris\");","map":{"version":3,"sources":["C:/jah-workspace/tetris-js/react-js/src/components/views/Tetris/Tetris.js"],"names":["React","useState","createCanvas","checkCollision","StyledTetrisWrapper","StyledTetris","useInterval","useCurrent","useCanvas","useGameStatus","Canvas","Display","StartButton","Tetris","dropTime","setDropTime","gameOver","setGameOver","current","updateCurrentPos","resetCurrent","canvas","setCanvas","rowsCleared","score","setScore","rows","setRows","level","setLevel","moveCurrent","dir","x","y","startGame","drop","prev","collided","pos","move","event","bounds","target","getBoundingClientRect","cellSize","width","document","getElementById","offsetLeft","offsetWidth","clientX","currentMouse","Math","round","e"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport { createCanvas, checkCollision } from '../../../settingGame';\r\n\r\n// styled-components\r\nimport { StyledTetrisWrapper, StyledTetris } from '../../styles/StyledTetris';\r\n\r\n// custom hooks\r\n// useInterval hooks from https://overreacted.io/making-setinterval-declarative-with-react-hooks/\r\nimport { useInterval } from '../../../_hooks/useInterval';\r\nimport { useCurrent } from '../../../_hooks/useCurrent';\r\nimport { useCanvas } from '../../../_hooks/useCanvas';\r\nimport { useGameStatus } from '../../../_hooks/useGameStatus';\r\n\r\n// components\r\nimport Canvas from '../Canvas/Canvas';\r\nimport Display from '../Display/Display';\r\nimport StartButton from '../StartButton/StartButton';\r\n\r\nconst Tetris = () => {\r\n    const [dropTime, setDropTime] = useState(null);\r\n    const [gameOver, setGameOver] = useState(false);\r\n\r\n    const [current, updateCurrentPos, resetCurrent] = useCurrent();\r\n    const [canvas, setCanvas, rowsCleared] = useCanvas(current, resetCurrent);\r\n    const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\r\n\r\n    const moveCurrent = dir => {\r\n        if (!checkCollision(current, canvas, {x:dir, y:0})) {\r\n            updateCurrentPos({x:dir, y:0});\r\n        }\r\n    };\r\n\r\n    // set(reset) game\r\n    const startGame = () => {\r\n        setCanvas(createCanvas());\r\n        setDropTime(1000);\r\n        resetCurrent();\r\n        setGameOver(false);\r\n        setScore(0);\r\n        setRows(0);\r\n        setLevel(0);\r\n    };\r\n\r\n    const drop = () => {\r\n        // increate level when cleared 10 rows\r\n        if (rows > (level + 1) * 10) {\r\n            setLevel(prev => prev + 1);\r\n            /// increase speed when level increased\r\n            setDropTime(1000 / (level + 1) + 100);\r\n        }\r\n        \r\n        // not collided : to drop the block\r\n        if (!checkCollision(current, canvas, {x:0, y:1})) {\r\n            updateCurrentPos({x:0, y:1, collided: false});\r\n        \r\n        // collided : game over\r\n        } else {\r\n            // game over\r\n            if (current.pos.y < 1) {\r\n                setGameOver(true);\r\n                setDropTime(null);\r\n            }\r\n            updateCurrentPos({x:0, y:0, collided:true});\r\n        }\r\n    };\r\n\r\n    const move = (event) => {\r\n        var bounds = event.target.getBoundingClientRect();\r\n        var cellSize = bounds.width;\r\n\r\n        var canvas = document.getElementById('canvas');\r\n        var offsetLeft = canvas.offsetLeft;\r\n        var offsetWidth = canvas.offsetWidth;\r\n\r\n        var clientX = event.clientX - offsetLeft;\r\n\r\n        if (!gameOver) {\r\n            if (clientX >= 0 && clientX < (offsetWidth - cellSize)) {\r\n                if (cellSize < (offsetWidth / 10)) {\r\n                    var currentMouse = Math.round(clientX / cellSize);\r\n                    if (currentMouse !== current.pos.x) {\r\n                        // console.log({currentMouse:currentMouse, current:current.pos.x});\r\n                        // to the left\r\n                        if (currentMouse < current.pos.x) {\r\n                            // console.log({l_currentMouse:currentMouse, l_current:current.pos.x});\r\n                            moveCurrent(-1);\r\n                            \r\n                        // to the right\r\n                        } else if (currentMouse > current.pos.x) {\r\n                            // console.log({r_currentMouse:currentMouse, r_current:current.pos.x});\r\n                            moveCurrent(1);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    useInterval(() => {\r\n        drop();\r\n    }, dropTime);\r\n\r\n    return (\r\n        <StyledTetrisWrapper role=\"button\" tabIndex=\"0\">\r\n            <StyledTetris>\r\n                <Canvas id={'canvas'} canvas={canvas} callback={e => move(e)}/>\r\n                <aside>\r\n                    {gameOver && <Display gameOver={gameOver} text=\"Game Over\" />}\r\n                    <div>\r\n                        <Display text={`Score: ${score}`} />\r\n                        <Display text={`rows: ${rows}`} />\r\n                        <Display text={`Level: ${level}`} />\r\n                    </div>\r\n                    <StartButton callback={startGame} />\r\n                </aside>\r\n            </StyledTetris>\r\n        </StyledTetrisWrapper>\r\n    );\r\n};\r\n\r\nexport default Tetris;"]},"metadata":{},"sourceType":"module"}