{"ast":null,"code":"import _slicedToArray from \"C:/jah-workspace/tetris-js/react-js/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback, useMemo } from 'react'; // using react-redux\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as actions from '../_actions/index';\nexport var useGameValues = function useGameValues(rowsCleared) {\n  _s();\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      score = _useState2[0],\n      setScore = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      rows = _useState4[0],\n      setRows = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      level = _useState6[0],\n      setLevel = _useState6[1];\n\n  var dispatch = useDispatch();\n  var tetris = useSelector(function (store) {\n    return store.tetris;\n  });\n  dispatch(actions.setScore(0));\n  dispatch(actions.setRows(0));\n  dispatch(actions.setLevel(0)); // original tetris game score\n\n  var linePoints = useMemo(function () {\n    return [40, 100, 300, 1200];\n  }, []);\n  var calcScore = useCallback(function () {\n    // if have score\n    if (rowsCleared > 0) {\n      // original tetrigs game score calculated\n      // setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\n      // setRows(prev => prev + rowsCleared);\n      dispatch(actions.setScore(function (prev) {\n        return prev + linePoints[rowsCleared - 1] * (tetris.level + 1);\n      }));\n      dispatch(actions.setRows(function (prev) {\n        return prev + rowsCleared;\n      }));\n    }\n  }, [tetris.level, linePoints, rowsCleared]);\n  useEffect(function () {\n    calcScore();\n  }, [calcScore, rowsCleared, tetris.score]); // return set-- for restarting game\n\n  return [score, setScore, rows, setRows, level, setLevel];\n};\n\n_s(useGameValues, \"kY2/XjrJMhdWM5brK9HhEARAYWk=\", false, function () {\n  return [useDispatch, useSelector];\n});","map":{"version":3,"sources":["C:/jah-workspace/tetris-js/react-js/src/_hooks/useGameValues.js"],"names":["useState","useEffect","useCallback","useMemo","useSelector","useDispatch","actions","useGameValues","rowsCleared","score","setScore","rows","setRows","level","setLevel","dispatch","tetris","store","linePoints","calcScore","prev"],"mappings":";;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,EAA2CC,OAA3C,QAA0D,OAA1D,C,CAEA;;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAO,KAAKC,OAAZ,MAAyB,mBAAzB;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,WAAW,EAAI;AAAA;;AACxC,kBAA0BR,QAAQ,CAAC,CAAD,CAAlC;AAAA;AAAA,MAAOS,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAAwBV,QAAQ,CAAC,CAAD,CAAhC;AAAA;AAAA,MAAOW,IAAP;AAAA,MAAaC,OAAb;;AACA,mBAA0BZ,QAAQ,CAAC,CAAD,CAAlC;AAAA;AAAA,MAAOa,KAAP;AAAA,MAAcC,QAAd;;AAEA,MAAMC,QAAQ,GAAGV,WAAW,EAA5B;AACA,MAAMW,MAAM,GAAGZ,WAAW,CAAC,UAACa,KAAD;AAAA,WAAWA,KAAK,CAACD,MAAjB;AAAA,GAAD,CAA1B;AAEAD,EAAAA,QAAQ,CAACT,OAAO,CAACI,QAAR,CAAiB,CAAjB,CAAD,CAAR;AACAK,EAAAA,QAAQ,CAACT,OAAO,CAACM,OAAR,CAAgB,CAAhB,CAAD,CAAR;AACAG,EAAAA,QAAQ,CAACT,OAAO,CAACQ,QAAR,CAAiB,CAAjB,CAAD,CAAR,CAVwC,CAYxC;;AACA,MAAMI,UAAU,GAAGf,OAAO,CAAC,YAAM;AAC7B,WAAO,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,EAAe,IAAf,CAAP;AACH,GAFyB,EAEvB,EAFuB,CAA1B;AAKA,MAAMgB,SAAS,GAAGjB,WAAW,CAAC,YAAM;AAChC;AACA,QAAIM,WAAW,GAAG,CAAlB,EAAqB;AACjB;AACA;AACA;AACAO,MAAAA,QAAQ,CAACT,OAAO,CAACI,QAAR,CAAiB,UAAAU,IAAI;AAAA,eAAIA,IAAI,GAAGF,UAAU,CAACV,WAAW,GAAG,CAAf,CAAV,IAA+BQ,MAAM,CAACH,KAAP,GAAe,CAA9C,CAAX;AAAA,OAArB,CAAD,CAAR;AACAE,MAAAA,QAAQ,CAACT,OAAO,CAACM,OAAR,CAAgB,UAAAQ,IAAI;AAAA,eAAIA,IAAI,GAAGZ,WAAX;AAAA,OAApB,CAAD,CAAR;AACH;AACJ,GAT4B,EAS1B,CAACQ,MAAM,CAACH,KAAR,EAAeK,UAAf,EAA2BV,WAA3B,CAT0B,CAA7B;AAWAP,EAAAA,SAAS,CAAC,YAAM;AACZkB,IAAAA,SAAS;AACZ,GAFQ,EAEN,CAACA,SAAD,EAAYX,WAAZ,EAAyBQ,MAAM,CAACP,KAAhC,CAFM,CAAT,CA7BwC,CAiCxC;;AACA,SAAO,CAACA,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAAwBC,OAAxB,EAAiCC,KAAjC,EAAwCC,QAAxC,CAAP;AACH,CAnCM;;GAAMP,a;UAKQF,W,EACFD,W","sourcesContent":["import { useState, useEffect, useCallback, useMemo } from 'react';\r\n\r\n// using react-redux\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as actions from '../_actions/index';\r\n\r\nexport const useGameValues = rowsCleared => {\r\n    const [score, setScore] = useState(0);\r\n    const [rows, setRows] = useState(0);\r\n    const [level, setLevel] = useState(0);\r\n\r\n    const dispatch = useDispatch();\r\n    const tetris = useSelector((store) => store.tetris);\r\n\r\n    dispatch(actions.setScore(0));\r\n    dispatch(actions.setRows(0));\r\n    dispatch(actions.setLevel(0));\r\n\r\n    // original tetris game score\r\n    const linePoints = useMemo(() => {\r\n        return [40, 100, 300, 1200];\r\n    }, []);\r\n\r\n\r\n    const calcScore = useCallback(() => {\r\n        // if have score\r\n        if (rowsCleared > 0) {\r\n            // original tetrigs game score calculated\r\n            // setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\r\n            // setRows(prev => prev + rowsCleared);\r\n            dispatch(actions.setScore(prev => prev + linePoints[rowsCleared - 1] * (tetris.level + 1)));\r\n            dispatch(actions.setRows(prev => prev + rowsCleared));\r\n        }\r\n    }, [tetris.level, linePoints, rowsCleared]);\r\n\r\n    useEffect(() => {\r\n        calcScore();\r\n    }, [calcScore, rowsCleared, tetris.score]);\r\n\r\n    // return set-- for restarting game\r\n    return [score, setScore, rows, setRows, level, setLevel];\r\n};\r\n"]},"metadata":{},"sourceType":"module"}