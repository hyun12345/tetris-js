{"ast":null,"code":"import _objectSpread from \"C:/jah-workspace/tetris-js/react-js/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { BOARD_WIDTH } from '../settingGame';\nimport { TETROMINOS, setBlock } from '../tetrominos';\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as actions from '../_actions/index';\nexport var useCurrent = function useCurrent() {\n  _s();\n\n  // // set default(board)\n  // const [current, setCurrent] = useState({\n  //     pos: { x: 0, y: 0 },\n  //     tetromino: TETROMINOS[0].shape,\n  //     collided: false,\n  // });\n  var dispatch = useDispatch();\n  dispatch(actions.setCurrent(function (prev) {\n    return {\n      pos: {\n        x: 0,\n        y: 0\n      },\n      tetromino: TETROMINOS[0].shape,\n      collided: false\n    };\n  }));\n  var tetris = useSelector(function (store) {\n    return store.tetris;\n  });\n\n  var updateCurrentPos = function updateCurrentPos(_ref) {\n    var x = _ref.x,\n        y = _ref.y,\n        collided = _ref.collided;\n    dispatch(actions.setCurrent(function (prev) {\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        pos: {\n          x: prev.pos.x += x,\n          y: prev.pos.y += y\n        },\n        collided: collided\n      });\n    })); // setCurrent(prev => ({\n    //     ...prev,\n    //     pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\n    //     collided,\n    // }));\n  }; // reset\n\n\n  var resetCurrent = useCallback(function () {\n    dispatch(actions.setCurrent({\n      // x result : set block position center of the board\n      pos: {\n        x: BOARD_WIDTH / 2 - 1,\n        y: 0\n      },\n      tetromino: setBlock().shape,\n      collided: false\n    }));\n  }, [dispatch]);\n  console.log({\n    tetrisCurrent: tetris.current\n  });\n  return [tetris.current, updateCurrentPos, resetCurrent];\n};\n\n_s(useCurrent, \"dH22PBCw5qjhLpUWiIqS0MEHoW8=\", false, function () {\n  return [useDispatch, useSelector];\n});","map":{"version":3,"sources":["C:/jah-workspace/tetris-js/react-js/src/_hooks/useCurrent.js"],"names":["useCallback","BOARD_WIDTH","TETROMINOS","setBlock","useSelector","useDispatch","actions","useCurrent","dispatch","setCurrent","prev","pos","x","y","tetromino","shape","collided","tetris","store","updateCurrentPos","resetCurrent","console","log","tetrisCurrent","current"],"mappings":";;;;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,eAArC;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAO,KAAKC,OAAZ,MAAyB,mBAAzB;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAAA;;AAC5B;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMC,QAAQ,GAAGH,WAAW,EAA5B;AACAG,EAAAA,QAAQ,CAACF,OAAO,CAACG,UAAR,CAAmB,UAAAC,IAAI;AAAA,WAAK;AACjCC,MAAAA,GAAG,EAAE;AAAEC,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAE;AAAX,OAD4B;AAEjCC,MAAAA,SAAS,EAAEZ,UAAU,CAAC,CAAD,CAAV,CAAca,KAFQ;AAGjCC,MAAAA,QAAQ,EAAE;AAHuB,KAAL;AAAA,GAAvB,CAAD,CAAR;AAKA,MAAMC,MAAM,GAAGb,WAAW,CAAC,UAACc,KAAD;AAAA,WAAWA,KAAK,CAACD,MAAjB;AAAA,GAAD,CAA1B;;AAEA,MAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,OAAwB;AAAA,QAArBP,CAAqB,QAArBA,CAAqB;AAAA,QAAlBC,CAAkB,QAAlBA,CAAkB;AAAA,QAAfG,QAAe,QAAfA,QAAe;AAC7CR,IAAAA,QAAQ,CAACF,OAAO,CAACG,UAAR,CAAmB,UAAAC,IAAI;AAAA,6CACzBA,IADyB;AAE5BC,QAAAA,GAAG,EAAE;AAAEC,UAAAA,CAAC,EAAGF,IAAI,CAACC,GAAL,CAASC,CAAT,IAAcA,CAApB;AAAwBC,UAAAA,CAAC,EAAGH,IAAI,CAACC,GAAL,CAASE,CAAT,IAAcA;AAA1C,SAFuB;AAG5BG,QAAAA,QAAQ,EAARA;AAH4B;AAAA,KAAvB,CAAD,CAAR,CAD6C,CAM7C;AACA;AACA;AACA;AACA;AACH,GAXD,CAhB4B,CA6B5B;;;AACA,MAAMI,YAAY,GAAGpB,WAAW,CAAC,YAAM;AACnCQ,IAAAA,QAAQ,CAACF,OAAO,CAACG,UAAR,CAAmB;AACxB;AACAE,MAAAA,GAAG,EAAE;AAAEC,QAAAA,CAAC,EAAIX,WAAW,GAAG,CAAf,GAAoB,CAA1B;AAA8BY,QAAAA,CAAC,EAAE;AAAjC,OAFmB;AAGxBC,MAAAA,SAAS,EAAEX,QAAQ,GAAGY,KAHE;AAIxBC,MAAAA,QAAQ,EAAE;AAJc,KAAnB,CAAD,CAAR;AAMH,GAP+B,EAO7B,CAACR,QAAD,CAP6B,CAAhC;AASAa,EAAAA,OAAO,CAACC,GAAR,CAAY;AAACC,IAAAA,aAAa,EAACN,MAAM,CAACO;AAAtB,GAAZ;AAEA,SAAO,CAACP,MAAM,CAACO,OAAR,EAAiBL,gBAAjB,EAAmCC,YAAnC,CAAP;AACH,CA1CM;;GAAMb,U;UAQQF,W,EAMFD,W","sourcesContent":["import { useCallback } from 'react';\r\nimport { BOARD_WIDTH } from '../settingGame';\r\nimport { TETROMINOS, setBlock } from '../tetrominos';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as actions from '../_actions/index';\r\n\r\nexport const useCurrent = () => {\r\n    // // set default(board)\r\n    // const [current, setCurrent] = useState({\r\n    //     pos: { x: 0, y: 0 },\r\n    //     tetromino: TETROMINOS[0].shape,\r\n    //     collided: false,\r\n    // });\r\n\r\n    const dispatch = useDispatch();\r\n    dispatch(actions.setCurrent(prev => ({\r\n        pos: { x: 0, y: 0 },\r\n        tetromino: TETROMINOS[0].shape,\r\n        collided: false,\r\n    })));\r\n    const tetris = useSelector((store) => store.tetris);\r\n\r\n    const updateCurrentPos = ({ x, y, collided }) => {\r\n        dispatch(actions.setCurrent(prev => ({\r\n            ...prev,\r\n            pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n            collided,\r\n        })));\r\n        // setCurrent(prev => ({\r\n        //     ...prev,\r\n        //     pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n        //     collided,\r\n        // }));\r\n    };\r\n\r\n    // reset\r\n    const resetCurrent = useCallback(() => {\r\n        dispatch(actions.setCurrent({\r\n            // x result : set block position center of the board\r\n            pos: { x: ((BOARD_WIDTH / 2) - 1), y: 0 },\r\n            tetromino: setBlock().shape,\r\n            collided: false,\r\n        }));\r\n    }, [dispatch, ]);\r\n\r\n    console.log({tetrisCurrent:tetris.current});\r\n\r\n    return [tetris.current, updateCurrentPos, resetCurrent];\r\n};\r\n"]},"metadata":{},"sourceType":"module"}