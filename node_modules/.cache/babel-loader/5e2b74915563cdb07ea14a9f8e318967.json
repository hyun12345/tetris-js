{"ast":null,"code":"import _objectSpread from \"C:/jah-workspace/tetris-js/react-js/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:/jah-workspace/tetris-js/react-js/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { combineReducers } from 'redux';\nimport { SET_SCORE, SET_ROWS, SET_LEVEL, SET_DROPTIME, SET_GAMEOVER, SET_ISIE, SET_BTNTITLE, SET_CLOSEIEALERT, SET_BOARD, SET_ROWSCLEARED, SET_CURRENT } from '../_actions/types';\nimport { checkIsIE, closeIEAlert } from '../settingGame';\nimport { useCurrent } from '../_hooks/useCurrent';\nimport { useBoard } from '../_hooks/useBoard';\nimport { useGameValues } from '../_hooks/useGameValues';\n\nvar _useCurrent = useCurrent(),\n    _useCurrent2 = _slicedToArray(_useCurrent, 3),\n    current = _useCurrent2[0],\n    updateCurrentPos = _useCurrent2[1],\n    resetCurrent = _useCurrent2[2];\n\nvar _useBoard = useBoard(current, resetCurrent),\n    _useBoard2 = _slicedToArray(_useBoard, 3),\n    board = _useBoard2[0],\n    setBoard = _useBoard2[1],\n    rowsCleared = _useBoard2[2];\n\nvar _useGameValues = useGameValues(rowsCleared),\n    _useGameValues2 = _slicedToArray(_useGameValues, 6),\n    score = _useGameValues2[0],\n    setScore = _useGameValues2[1],\n    rows = _useGameValues2[2],\n    setRows = _useGameValues2[3],\n    level = _useGameValues2[4],\n    setLevel = _useGameValues2[5]; //  setting default state value\n\n\nvar initialState = {\n  score: 0,\n  rows: 0,\n  level: 0,\n  dropTime: null,\n  gameOver: false,\n  btnTitle: 'Start Game',\n  isIE: checkIsIE(),\n  closeIEAlert: closeIEAlert(),\n  board: {},\n  rowsCleared: 0,\n  current: {}\n};\n\nvar tetris = function tetris() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_SCORE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        score: action.payload\n      });\n\n    case SET_ROWS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        rows: action.payload\n      });\n\n    case SET_LEVEL:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        level: action.payload\n      });\n\n    case SET_DROPTIME:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        dropTime: action.payload\n      });\n\n    case SET_GAMEOVER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        gameOver: action.payload\n      });\n\n    case SET_BTNTITLE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        btnTitle: action.payload\n      });\n\n    case SET_ISIE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isIE: action.payload\n      });\n\n    case SET_CLOSEIEALERT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        closeIEAlert: action.payload\n      });\n\n    case SET_BOARD:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        board: action.payload\n      });\n\n    case SET_ROWSCLEARED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        rowsCleared: action.payload\n      });\n\n    case SET_CURRENT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        current: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar tetrisReducer = combineReducers({\n  tetris: tetris\n});\nexport default tetrisReducer;","map":{"version":3,"sources":["C:/jah-workspace/tetris-js/react-js/src/_reducers/index.js"],"names":["combineReducers","SET_SCORE","SET_ROWS","SET_LEVEL","SET_DROPTIME","SET_GAMEOVER","SET_ISIE","SET_BTNTITLE","SET_CLOSEIEALERT","SET_BOARD","SET_ROWSCLEARED","SET_CURRENT","checkIsIE","closeIEAlert","useCurrent","useBoard","useGameValues","current","updateCurrentPos","resetCurrent","board","setBoard","rowsCleared","score","setScore","rows","setRows","level","setLevel","initialState","dropTime","gameOver","btnTitle","isIE","tetris","state","action","type","payload","tetrisReducer"],"mappings":"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","sourcesContent":["import { combineReducers } from 'redux';\r\n\r\nimport { \r\n    SET_SCORE, \r\n    SET_ROWS, \r\n    SET_LEVEL, \r\n    SET_DROPTIME, \r\n    SET_GAMEOVER, \r\n    SET_ISIE,\r\n    SET_BTNTITLE,\r\n    SET_CLOSEIEALERT,\r\n    SET_BOARD,\r\n    SET_ROWSCLEARED,\r\n    SET_CURRENT\r\n } from '../_actions/types';\r\n\r\nimport { checkIsIE, closeIEAlert} from '../settingGame';\r\n\r\nimport { useCurrent } from '../_hooks/useCurrent';\r\nimport { useBoard } from '../_hooks/useBoard';\r\nimport { useGameValues } from '../_hooks/useGameValues';\r\n\r\nconst [current, updateCurrentPos, resetCurrent] = useCurrent();\r\nconst [board, setBoard, rowsCleared] = useBoard(current, resetCurrent);\r\nconst [score, setScore, rows, setRows, level, setLevel] = useGameValues(rowsCleared);\r\n\r\n//  setting default state value\r\nconst initialState = {\r\n    score: 0,\r\n    rows: 0,\r\n    level: 0,\r\n    dropTime: null,\r\n    gameOver: false,\r\n    btnTitle: 'Start Game',\r\n    isIE: checkIsIE(),\r\n    closeIEAlert: closeIEAlert(),\r\n    board:{},\r\n    rowsCleared: 0,\r\n    current:{}\r\n}\r\n\r\nconst tetris = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case SET_SCORE:\r\n            return {...state, score: action.payload}\r\n        case SET_ROWS:\r\n            return { ...state, rows: action.payload}\r\n        case SET_LEVEL:\r\n            return {...state, level: action.payload}\r\n        case SET_DROPTIME:\r\n            return {...state, dropTime: action.payload}\r\n        case SET_GAMEOVER:\r\n            return {...state, gameOver: action.payload}\r\n        case SET_BTNTITLE:\r\n            return {...state, btnTitle: action.payload}\r\n        case SET_ISIE:\r\n            return {...state, isIE: action.payload}\r\n        case SET_CLOSEIEALERT:\r\n            return {...state, closeIEAlert: action.payload}\r\n        case SET_BOARD:\r\n            return {...state, board: action.payload}\r\n        case SET_ROWSCLEARED:\r\n            return {...state, rowsCleared: action.payload}\r\n        case SET_CURRENT:\r\n            return {...state, current: action.payload}\r\n            default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst tetrisReducer = combineReducers({\r\n    tetris,\r\n});\r\n\r\nexport default tetrisReducer;"]},"metadata":{},"sourceType":"module"}