{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport * as actions from '../_actions/index';\nexport var useGameValues = function useGameValues(rowsCleared) {\n  _s();\n\n  var dispatch = useDispatch();\n  var tetris = useSelector(function (store) {\n    return store.tetris;\n  });\n  dispatch(actions.setScore(0));\n  ispatch(actions.setRows(0));\n  ispatch(actions.setLevel(0)); // original tetris game score\n\n  var linePoints = useMemo(function () {\n    return [40, 100, 300, 1200];\n  }, []);\n  var calcScore = useCallback(function () {\n    // if have score\n    if (rowsCleared > 0) {\n      // original tetrigs game score calculated\n      dispatch(actions.setScore(function (prev) {\n        return prev + linePoints[rowsCleared - 1] * (tetris.level + 1);\n      }));\n      dispatch(actions.setRows(function (prev) {\n        return prev + rowsCleared;\n      }));\n    }\n  }, [tetris.level, linePoints, rowsCleared, dispatch]);\n  useEffect(function () {\n    calcScore();\n  }, [calcScore, rowsCleared, tetris.score]); // return set-- for restarting game\n\n  return [];\n};\n\n_s(useGameValues, \"b+sJBs18vbNfRlbd84ErpeDAP8g=\", true, function () {\n  return [useDispatch];\n});","map":{"version":3,"sources":["C:/jah-workspace/tetris-js/react-js/src/_hooks/useGameValues.js"],"names":["useState","useEffect","useCallback","useMemo","useDispatch","actions","useGameValues","rowsCleared","dispatch","tetris","useSelector","store","setScore","ispatch","setRows","setLevel","linePoints","calcScore","prev","level","score"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,EAA2CC,OAA3C,QAA0D,OAA1D;AAEA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAO,KAAKC,OAAZ,MAAyB,mBAAzB;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,WAAW,EAAI;AAAA;;AACxC,MAAMC,QAAQ,GAAGJ,WAAW,EAA5B;AACA,MAAMK,MAAM,GAAGC,WAAW,CAAC,UAACC,KAAD;AAAA,WAAWA,KAAK,CAACF,MAAjB;AAAA,GAAD,CAA1B;AAEAD,EAAAA,QAAQ,CAACH,OAAO,CAACO,QAAR,CAAiB,CAAjB,CAAD,CAAR;AACAC,EAAAA,OAAO,CAACR,OAAO,CAACS,OAAR,CAAgB,CAAhB,CAAD,CAAP;AACAD,EAAAA,OAAO,CAACR,OAAO,CAACU,QAAR,CAAiB,CAAjB,CAAD,CAAP,CANwC,CAQxC;;AACA,MAAMC,UAAU,GAAGb,OAAO,CAAC,YAAM;AAC7B,WAAO,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,EAAe,IAAf,CAAP;AACH,GAFyB,EAEvB,EAFuB,CAA1B;AAKA,MAAMc,SAAS,GAAGf,WAAW,CAAC,YAAM;AAChC;AACA,QAAIK,WAAW,GAAG,CAAlB,EAAqB;AACjB;AACAC,MAAAA,QAAQ,CAACH,OAAO,CAACO,QAAR,CAAiB,UAAAM,IAAI;AAAA,eAAIA,IAAI,GAAGF,UAAU,CAACT,WAAW,GAAG,CAAf,CAAV,IAA+BE,MAAM,CAACU,KAAP,GAAe,CAA9C,CAAX;AAAA,OAArB,CAAD,CAAR;AACAX,MAAAA,QAAQ,CAACH,OAAO,CAACS,OAAR,CAAgB,UAAAI,IAAI;AAAA,eAAIA,IAAI,GAAGX,WAAX;AAAA,OAApB,CAAD,CAAR;AACH;AACJ,GAP4B,EAO1B,CAACE,MAAM,CAACU,KAAR,EAAeH,UAAf,EAA2BT,WAA3B,EAAwCC,QAAxC,CAP0B,CAA7B;AASAP,EAAAA,SAAS,CAAC,YAAM;AACZgB,IAAAA,SAAS;AACZ,GAFQ,EAEN,CAACA,SAAD,EAAYV,WAAZ,EAAyBE,MAAM,CAACW,KAAhC,CAFM,CAAT,CAvBwC,CA2BxC;;AACA,SAAO,EAAP;AACH,CA7BM;;GAAMd,a;UACQF,W","sourcesContent":["import { useState, useEffect, useCallback, useMemo } from 'react';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport * as actions from '../_actions/index';\r\n\r\nexport const useGameValues = rowsCleared => {\r\n    const dispatch = useDispatch();\r\n    const tetris = useSelector((store) => store.tetris);\r\n    \r\n    dispatch(actions.setScore(0));\r\n    ispatch(actions.setRows(0));\r\n    ispatch(actions.setLevel(0));\r\n\r\n    // original tetris game score\r\n    const linePoints = useMemo(() => {\r\n        return [40, 100, 300, 1200];\r\n    }, []);\r\n\r\n\r\n    const calcScore = useCallback(() => {\r\n        // if have score\r\n        if (rowsCleared > 0) {\r\n            // original tetrigs game score calculated\r\n            dispatch(actions.setScore(prev => prev + linePoints[rowsCleared - 1] * (tetris.level + 1)));\r\n            dispatch(actions.setRows(prev => prev + rowsCleared));\r\n        }\r\n    }, [tetris.level, linePoints, rowsCleared, dispatch]);\r\n\r\n    useEffect(() => {\r\n        calcScore();\r\n    }, [calcScore, rowsCleared, tetris.score]);\r\n\r\n    // return set-- for restarting game\r\n    return [];\r\n};\r\n"]},"metadata":{},"sourceType":"module"}