{"ast":null,"code":"import _objectSpread from \"C:/jah-workspace/tetris-js/react-js/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { BOARD_WIDTH } from '../settingGame';\nimport { setBlock } from '../tetrominos';\nimport { useDispatch } from 'react-redux';\nimport * as actions from '../_actions/index';\nexport var useCurrent = function useCurrent() {\n  _s();\n\n  // // set default(board)\n  // const [current, setCurrent] = useState({\n  //     pos: { x: 0, y: 0 },\n  //     tetromino: TETROMINOS[0].shape,\n  //     collided: false,\n  // });\n  var dispatch = useDispatch();\n\n  var updateCurrentPos = function updateCurrentPos(_ref) {\n    var x = _ref.x,\n        y = _ref.y,\n        collided = _ref.collided;\n    dispatch(actions.setCurrent(function (prev) {\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        pos: {\n          x: prev.pos.x += x,\n          y: prev.pos.y += y\n        },\n        collided: collided\n      });\n    })); // setCurrent(prev => ({\n    //     ...prev,\n    //     pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\n    //     collided,\n    // }));\n  }; // reset\n\n\n  var resetCurrent = useCallback(function () {\n    dispatch(actions.setCurrent({\n      // x result : set block position center of the board\n      pos: {\n        x: BOARD_WIDTH / 2 - 1,\n        y: 0\n      },\n      tetromino: setBlock().shape,\n      collided: false\n    }));\n  }, []);\n  return [updateCurrentPos, resetCurrent];\n};\n\n_s(useCurrent, \"4Qk3R8P4pPUuHezKUtWZBMdLccE=\", false, function () {\n  return [useDispatch];\n});","map":{"version":3,"sources":["C:/jah-workspace/tetris-js/react-js/src/_hooks/useCurrent.js"],"names":["useCallback","BOARD_WIDTH","setBlock","useDispatch","actions","useCurrent","dispatch","updateCurrentPos","x","y","collided","setCurrent","prev","pos","resetCurrent","tetromino","shape"],"mappings":";;;;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,QAAT,QAAyB,eAAzB;AAEA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAO,KAAKC,OAAZ,MAAyB,mBAAzB;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAAA;;AAC5B;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMC,QAAQ,GAAGH,WAAW,EAA5B;;AAGA,MAAMI,gBAAgB,GAAG,SAAnBA,gBAAmB,OAAwB;AAAA,QAArBC,CAAqB,QAArBA,CAAqB;AAAA,QAAlBC,CAAkB,QAAlBA,CAAkB;AAAA,QAAfC,QAAe,QAAfA,QAAe;AAC7CJ,IAAAA,QAAQ,CAACF,OAAO,CAACO,UAAR,CAAmB,UAAAC,IAAI;AAAA,6CACzBA,IADyB;AAE5BC,QAAAA,GAAG,EAAE;AAAEL,UAAAA,CAAC,EAAGI,IAAI,CAACC,GAAL,CAASL,CAAT,IAAcA,CAApB;AAAwBC,UAAAA,CAAC,EAAGG,IAAI,CAACC,GAAL,CAASJ,CAAT,IAAcA;AAA1C,SAFuB;AAG5BC,QAAAA,QAAQ,EAARA;AAH4B;AAAA,KAAvB,CAAD,CAAR,CAD6C,CAM7C;AACA;AACA;AACA;AACA;AACH,GAXD,CAX4B,CAwB5B;;;AACA,MAAMI,YAAY,GAAGd,WAAW,CAAC,YAAM;AACnCM,IAAAA,QAAQ,CAACF,OAAO,CAACO,UAAR,CAAmB;AACxB;AACAE,MAAAA,GAAG,EAAE;AAAEL,QAAAA,CAAC,EAAIP,WAAW,GAAG,CAAf,GAAoB,CAA1B;AAA8BQ,QAAAA,CAAC,EAAE;AAAjC,OAFmB;AAGxBM,MAAAA,SAAS,EAAEb,QAAQ,GAAGc,KAHE;AAIxBN,MAAAA,QAAQ,EAAE;AAJc,KAAnB,CAAD,CAAR;AAMH,GAP+B,EAO7B,EAP6B,CAAhC;AASA,SAAO,CAACH,gBAAD,EAAmBO,YAAnB,CAAP;AACH,CAnCM;;GAAMT,U;UAQQF,W","sourcesContent":["import { useCallback } from 'react';\r\nimport { BOARD_WIDTH } from '../settingGame';\r\nimport { setBlock } from '../tetrominos';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport * as actions from '../_actions/index';\r\n\r\nexport const useCurrent = () => {\r\n    // // set default(board)\r\n    // const [current, setCurrent] = useState({\r\n    //     pos: { x: 0, y: 0 },\r\n    //     tetromino: TETROMINOS[0].shape,\r\n    //     collided: false,\r\n    // });\r\n\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const updateCurrentPos = ({ x, y, collided }) => {\r\n        dispatch(actions.setCurrent(prev => ({\r\n            ...prev,\r\n            pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n            collided,\r\n        })));\r\n        // setCurrent(prev => ({\r\n        //     ...prev,\r\n        //     pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n        //     collided,\r\n        // }));\r\n    };\r\n\r\n    // reset\r\n    const resetCurrent = useCallback(() => {\r\n        dispatch(actions.setCurrent({\r\n            // x result : set block position center of the board\r\n            pos: { x: ((BOARD_WIDTH / 2) - 1), y: 0 },\r\n            tetromino: setBlock().shape,\r\n            collided: false,\r\n        }));\r\n    }, []);\r\n\r\n    return [updateCurrentPos, resetCurrent];\r\n};\r\n"]},"metadata":{},"sourceType":"module"}