{"ast":null,"code":"import _slicedToArray from \"C:/jah-workspace/tetris-js/react-js/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback, useMemo } from 'react';\nexport var useGameValues = function useGameValues(rowsCleared) {\n  _s();\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      score = _useState2[0],\n      setScore = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      rows = _useState4[0],\n      setRows = _useState4[1];\n\n  var _useState5 = useState(0),\n      _useState6 = _slicedToArray(_useState5, 2),\n      level = _useState6[0],\n      setLevel = _useState6[1]; // original tetris game score\n\n\n  var linePoints = useMemo(function () {\n    return [40, 100, 300, 1200];\n  }, []);\n  var calcScore = useCallback(function () {\n    // if have score\n    if (rowsCleared > 0) {\n      // original tetrigs game score calculated\n      setScore(function (prev) {\n        return prev + linePoints[rowsCleared - 1] * (level + 1);\n      });\n      setRows(function (prev) {\n        return prev + rowsCleared;\n      });\n    }\n  }, [level, linePoints, rowsCleared]);\n  useEffect(function () {\n    calcScore();\n  }, [calcScore, rowsCleared, score]); // return set-- for restarting game\n\n  return [score, setScore, rows, setRows, level, setLevel];\n};\n\n_s(useGameValues, \"Su4/EVD/JJ40cw9PV2HG7Fb8fzk=\");","map":{"version":3,"sources":["C:/jah-workspace/tetris-js/react-js/src/_hooks/useGameValues.js"],"names":["useState","useEffect","useCallback","useMemo","useGameValues","rowsCleared","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","prev"],"mappings":";;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,EAA2CC,OAA3C,QAA0D,OAA1D;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,WAAW,EAAI;AAAA;;AACxC,kBAA0BL,QAAQ,CAAC,CAAD,CAAlC;AAAA;AAAA,MAAOM,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAAwBP,QAAQ,CAAC,CAAD,CAAhC;AAAA;AAAA,MAAOQ,IAAP;AAAA,MAAaC,OAAb;;AACA,mBAA0BT,QAAQ,CAAC,CAAD,CAAlC;AAAA;AAAA,MAAOU,KAAP;AAAA,MAAcC,QAAd,iBAHwC,CAKxC;;;AACA,MAAMC,UAAU,GAAGT,OAAO,CAAC,YAAM;AAC7B,WAAO,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,EAAe,IAAf,CAAP;AACH,GAFyB,EAEvB,EAFuB,CAA1B;AAKA,MAAMU,SAAS,GAAGX,WAAW,CAAC,YAAM;AAChC;AACA,QAAIG,WAAW,GAAG,CAAlB,EAAqB;AACjB;AACAE,MAAAA,QAAQ,CAAC,UAAAO,IAAI;AAAA,eAAIA,IAAI,GAAGF,UAAU,CAACP,WAAW,GAAG,CAAf,CAAV,IAA+BK,KAAK,GAAG,CAAvC,CAAX;AAAA,OAAL,CAAR;AACAD,MAAAA,OAAO,CAAC,UAAAK,IAAI;AAAA,eAAIA,IAAI,GAAGT,WAAX;AAAA,OAAL,CAAP;AACH;AACJ,GAP4B,EAO1B,CAACK,KAAD,EAAQE,UAAR,EAAoBP,WAApB,CAP0B,CAA7B;AASAJ,EAAAA,SAAS,CAAC,YAAM;AACZY,IAAAA,SAAS;AACZ,GAFQ,EAEN,CAACA,SAAD,EAAYR,WAAZ,EAAyBC,KAAzB,CAFM,CAAT,CApBwC,CAwBxC;;AACA,SAAO,CAACA,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAAwBC,OAAxB,EAAiCC,KAAjC,EAAwCC,QAAxC,CAAP;AACH,CA1BM;;GAAMP,a","sourcesContent":["import { useState, useEffect, useCallback, useMemo } from 'react';\r\n\r\nexport const useGameValues = rowsCleared => {\r\n    const [score, setScore] = useState(0);\r\n    const [rows, setRows] = useState(0);\r\n    const [level, setLevel] = useState(0);\r\n\r\n    // original tetris game score\r\n    const linePoints = useMemo(() => {\r\n        return [40, 100, 300, 1200];\r\n    }, []);\r\n\r\n\r\n    const calcScore = useCallback(() => {\r\n        // if have score\r\n        if (rowsCleared > 0) {\r\n            // original tetrigs game score calculated\r\n            setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\r\n            setRows(prev => prev + rowsCleared);\r\n        }\r\n    }, [level, linePoints, rowsCleared]);\r\n\r\n    useEffect(() => {\r\n        calcScore();\r\n    }, [calcScore, rowsCleared, score]);\r\n\r\n    // return set-- for restarting game\r\n    return [score, setScore, rows, setRows, level, setLevel];\r\n};\r\n"]},"metadata":{},"sourceType":"module"}