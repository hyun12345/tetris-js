{"ast":null,"code":"export var BOARD_WIDTH = 10;\nexport var BOARD_HEIGHT = 20;\nexport var createBoard = function createBoard() {\n  return Array.from(Array(BOARD_HEIGHT), function () {\n    return Array(BOARD_WIDTH).fill([0, 'clear']);\n  });\n};\nexport var checkCollision = function checkCollision(current, board, _ref) {\n  var moveX = _ref.x,\n      moveY = _ref.y;\n\n  for (var y = 0; y < current.tetromino.length; y++) {\n    for (var x = 0; x < current.tetromino[y].length; x++) {\n      // 1. check if it's tetromino cell or empty cell\n      if (current.tetromino[y][x] !== 0) {\n        if ( // 2. check if it's inside of the board(height = y)\n        !board[y + current.pos.y + moveY] || // 3. check if it's inside of the board(width = x)\n        !board[y + current.pos.y + moveY][x + current.pos.x + moveX] || // 4. check if it's not empty where tetromino move to\n        board[y + current.pos.y + moveY][x + current.pos.x + moveX][1] !== 'clear') {\n          return true;\n        }\n      }\n    }\n  } // if collided return false\n\n\n  return false;\n}; // check if current browser is IE\n\nexport var checkIsIE = function checkIsIE() {\n  console.log({\n    testing: !!document.documentMode\n  });\n  return !!document.documentMode;\n};","map":{"version":3,"sources":["C:/jah-workspace/tetris-js/react-js/src/settingGame.js"],"names":["BOARD_WIDTH","BOARD_HEIGHT","createBoard","Array","from","fill","checkCollision","current","board","moveX","x","moveY","y","tetromino","length","pos","checkIsIE","console","log","testing","document","documentMode"],"mappings":"AAAA,OAAO,IAAMA,WAAW,GAAG,EAApB;AACP,OAAO,IAAMC,YAAY,GAAG,EAArB;AAEP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc;AAAA,SACvBC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACF,YAAD,CAAhB,EAAgC;AAAA,WAAME,KAAK,CAACH,WAAD,CAAL,CAAmBK,IAAnB,CAAwB,CAAC,CAAD,EAAI,OAAJ,CAAxB,CAAN;AAAA,GAAhC,CADuB;AAAA,CAApB;AAGP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,OAAD,EAAUC,KAAV,QAAwC;AAAA,MAApBC,KAAoB,QAAtBC,CAAsB;AAAA,MAAXC,KAAW,QAAbC,CAAa;;AAClE,OAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,OAAO,CAACM,SAAR,CAAkBC,MAAtC,EAA8CF,CAAC,EAA/C,EAAmD;AAC/C,SAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAAO,CAACM,SAAR,CAAkBD,CAAlB,EAAqBE,MAAzC,EAAiDJ,CAAC,EAAlD,EAAsD;AAClD;AACA,UAAIH,OAAO,CAACM,SAAR,CAAkBD,CAAlB,EAAqBF,CAArB,MAA4B,CAAhC,EAAmC;AAC/B,aACI;AACA,SAACF,KAAK,CAACI,CAAC,GAAGL,OAAO,CAACQ,GAAR,CAAYH,CAAhB,GAAoBD,KAArB,CAAN,IACA;AACA,SAACH,KAAK,CAACI,CAAC,GAAGL,OAAO,CAACQ,GAAR,CAAYH,CAAhB,GAAoBD,KAArB,CAAL,CAAiCD,CAAC,GAAGH,OAAO,CAACQ,GAAR,CAAYL,CAAhB,GAAoBD,KAArD,CAFD,IAGA;AACAD,QAAAA,KAAK,CAACI,CAAC,GAAGL,OAAO,CAACQ,GAAR,CAAYH,CAAhB,GAAoBD,KAArB,CAAL,CAAiCD,CAAC,GAAGH,OAAO,CAACQ,GAAR,CAAYL,CAAhB,GAAoBD,KAArD,EAA4D,CAA5D,MAAmE,OANvE,EAOE;AACE,iBAAO,IAAP;AACH;AACJ;AACJ;AACJ,GAjBiE,CAkBlE;;;AACA,SAAO,KAAP;AACH,CApBM,C,CAsBP;;AACA,OAAO,IAAMO,SAAS,GAAG,SAAZA,SAAY,GAAM;AAC3BC,EAAAA,OAAO,CAACC,GAAR,CAAY;AAACC,IAAAA,OAAO,EAAC,CAAC,CAAEC,QAAD,CAAWC;AAAtB,GAAZ;AACA,SAAO,CAAC,CAAED,QAAD,CAAWC,YAApB;AACH,CAHM","sourcesContent":["export const BOARD_WIDTH = 10;\r\nexport const BOARD_HEIGHT = 20;\r\n\r\nexport const createBoard = () =>\r\n    Array.from(Array(BOARD_HEIGHT), () => Array(BOARD_WIDTH).fill([0, 'clear']));\r\n\r\nexport const checkCollision = (current, board, {x:moveX, y:moveY}) => {\r\n    for (let y = 0; y < current.tetromino.length; y++) {\r\n        for (let x = 0; x < current.tetromino[y].length; x++) {\r\n            // 1. check if it's tetromino cell or empty cell\r\n            if (current.tetromino[y][x] !== 0) {\r\n                if (\r\n                    // 2. check if it's inside of the board(height = y)\r\n                    !board[y + current.pos.y + moveY] ||\r\n                    // 3. check if it's inside of the board(width = x)\r\n                    !board[y + current.pos.y + moveY][x + current.pos.x + moveX] ||\r\n                    // 4. check if it's not empty where tetromino move to\r\n                    board[y + current.pos.y + moveY][x + current.pos.x + moveX][1] !== 'clear'\r\n                ) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // if collided return false\r\n    return false;\r\n};\r\n\r\n// check if current browser is IE\r\nexport const checkIsIE = () => {\r\n    console.log({testing:!!(document).documentMode});\r\n    return !!(document).documentMode;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}