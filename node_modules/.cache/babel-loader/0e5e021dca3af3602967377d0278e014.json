{"ast":null,"code":"import _slicedToArray from \"C:/jah-workspace/tetris-js/react-js/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\jah-workspace\\\\tetris-js\\\\react-js\\\\src\\\\components\\\\views\\\\Tetris\\\\Tetris.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React from 'react'; // using react-redux\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as actions from '../../../_actions/index';\nimport { BOARD_WIDTH, createBoard, checkCollision } from '../../../settingGame'; // styled-components\n\nimport { StyledTetrisWrapper, StyledTetrisAlertContainer, StyledTetris } from '../../styles/StyledTetris'; // custom hooks\n// useInterval hooks from https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useInterval } from '../../../_hooks/useInterval';\nimport { useCurrent } from '../../../_hooks/useCurrent';\nimport { useBoard } from '../../../_hooks/useBoard';\nimport { useGameValues } from '../../../_hooks/useGameValues'; // components\n\nimport Alert from '../Alert/Alert';\nimport Board from '../Board/Board';\nimport Display from '../Display/Display';\nimport Button from '../Button/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Tetris = function Tetris() {\n  _s();\n\n  var dispatch = useDispatch();\n  var tetris = useSelector(function (store) {\n    return store.tetris;\n  });\n\n  var _useCurrent = useCurrent(),\n      _useCurrent2 = _slicedToArray(_useCurrent, 3),\n      current = _useCurrent2[0],\n      updateCurrentPos = _useCurrent2[1],\n      resetCurrent = _useCurrent2[2];\n\n  var _useBoard = useBoard(current, resetCurrent),\n      _useBoard2 = _slicedToArray(_useBoard, 4),\n      board = _useBoard2[0],\n      setBoard = _useBoard2[1],\n      rowsCleared = _useBoard2[2],\n      isIE = _useBoard2[3];\n\n  var _useGameValues = useGameValues(rowsCleared),\n      _useGameValues2 = _slicedToArray(_useGameValues, 4),\n      score = _useGameValues2[0],\n      rows = _useGameValues2[1],\n      level = _useGameValues2[2],\n      setLevel = _useGameValues2[3];\n\n  var setBrowserAlert = function setBrowserAlert() {\n    console.log('setAlert clicked');\n    dispatch(actions.setIEAlert(!tetris.ieIEAlert));\n    console.log({\n      ieAlert: tetris.ieAlert\n    });\n  };\n\n  var moveCurrent = function moveCurrent(dir) {\n    if (!checkCollision(current, board, {\n      x: dir,\n      y: 0\n    })) {\n      updateCurrentPos({\n        x: dir,\n        y: 0\n      });\n    }\n  }; // set(reset) game\n\n\n  var startGame = function startGame() {\n    setBoard(createBoard());\n    resetCurrent();\n    dispatch(actions.setDropTime(100));\n    dispatch(actions.setGameOver(false));\n    dispatch(actions.setScore(0));\n    dispatch(actions.setRows(0));\n    dispatch(actions.setLevel(0));\n    dispatch(actions.setBtnTitle('Re-Start Game'));\n  };\n\n  var drop = function drop() {\n    // increate level when cleared 10 rows\n    if (rows > (level + 1) * 10) {\n      dispatch(actions.setLevel(function (prev) {\n        return prev + 1;\n      })); /// increase speed when level increased\n\n      dispatch(actions.setDropTime(tetris.dropTime / (level + 1) + 100));\n    } // not collided : to drop the block\n\n\n    if (!checkCollision(current, board, {\n      x: 0,\n      y: 1\n    })) {\n      updateCurrentPos({\n        x: 0,\n        y: 1,\n        collided: false\n      }); // collided : game over\n    } else {\n      // game over\n      if (current.pos.y < 1) {\n        console.log('gameOver');\n        dispatch(actions.setGameOver(true));\n        dispatch(actions.setDropTime(null));\n      }\n\n      updateCurrentPos({\n        x: 0,\n        y: 0,\n        collided: true\n      });\n    }\n  };\n\n  var move = function move(event) {\n    // to get each cell size\n    var bounds = event.target.getBoundingClientRect();\n    var cellSize = bounds.width;\n    var board = document.getElementById('board'); // value of margin-left + padding-left from board\n\n    var offsetLeft = board.offsetLeft; // to get board area\n\n    var offsetWidth = board.offsetWidth;\n    var clientX = event.clientX - offsetLeft;\n\n    if (!tetris.gameOver) {\n      if (clientX >= 0 && clientX < offsetWidth - cellSize) {\n        if (cellSize < offsetWidth / BOARD_WIDTH) {\n          var mouseX = Math.round(clientX / cellSize);\n\n          if (mouseX !== current.pos.x) {\n            // to the left\n            if (mouseX < current.pos.x) {\n              moveCurrent(-1); // to the right\n            } else if (mouseX > current.pos.x) {\n              moveCurrent(1);\n            }\n          }\n        }\n      }\n    }\n  };\n\n  useInterval(function () {\n    drop();\n  }, tetris.dropTime);\n  return /*#__PURE__*/_jsxDEV(StyledTetrisWrapper, {\n    role: \"button\",\n    tabIndex: \"0\",\n    children: [isIE && /*#__PURE__*/_jsxDEV(StyledTetrisAlertContainer, {\n      children: !tetris.ieAlert && /*#__PURE__*/_jsxDEV(Alert, {\n        isIE: isIE,\n        text: 'Not working in IE. Try another browser.',\n        callback: setBrowserAlert,\n        buttonTitle: 'OK'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 21\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 22\n    }, _this), /*#__PURE__*/_jsxDEV(StyledTetris, {\n      children: [/*#__PURE__*/_jsxDEV(Board, {\n        id: 'board',\n        board: board,\n        callback: function callback(e) {\n          return move(e);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"aside\", {\n        children: [tetris.gameOver && /*#__PURE__*/_jsxDEV(Display, {\n          gameOver: tetris.gameOver,\n          text: \"Game Over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 41\n        }, _this), !isIE && /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            callback: startGame,\n            title: tetris.btnTitle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 29\n          }, _this), /*#__PURE__*/_jsxDEV(Display, {\n            text: tetris.gameOver ? \"Final-Score: \".concat(score) : \"Score: \".concat(score)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 29\n          }, _this), /*#__PURE__*/_jsxDEV(Display, {\n            text: tetris.gameOver ? \"Final-Rows: \".concat(rows) : \"Rows: \".concat(rows)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 29\n          }, _this), /*#__PURE__*/_jsxDEV(Display, {\n            text: tetris.gameOver ? \"Final-Level: \".concat(level) : \"Level: \".concat(level)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 29\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 25\n        }, _this), isIE && tetris.ieAlert && /*#__PURE__*/_jsxDEV(Button, {\n          callback: setBrowserAlert,\n          title: tetris.btnTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 49\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(Tetris, \"iQcuP8SIkHu/ysbWFObkQlU13hw=\", false, function () {\n  return [useDispatch, useSelector, useCurrent, useBoard, useGameValues, useInterval];\n});\n\n_c = Tetris;\nexport default Tetris;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tetris\");","map":{"version":3,"sources":["C:/jah-workspace/tetris-js/react-js/src/components/views/Tetris/Tetris.js"],"names":["React","useSelector","useDispatch","actions","BOARD_WIDTH","createBoard","checkCollision","StyledTetrisWrapper","StyledTetrisAlertContainer","StyledTetris","useInterval","useCurrent","useBoard","useGameValues","Alert","Board","Display","Button","Tetris","dispatch","tetris","store","current","updateCurrentPos","resetCurrent","board","setBoard","rowsCleared","isIE","score","rows","level","setLevel","setBrowserAlert","console","log","setIEAlert","ieIEAlert","ieAlert","moveCurrent","dir","x","y","startGame","setDropTime","setGameOver","setScore","setRows","setBtnTitle","drop","prev","dropTime","collided","pos","move","event","bounds","target","getBoundingClientRect","cellSize","width","document","getElementById","offsetLeft","offsetWidth","clientX","gameOver","mouseX","Math","round","e","btnTitle"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\n// using react-redux\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as actions from '../../../_actions/index';\r\n\r\nimport { BOARD_WIDTH, createBoard, checkCollision } from '../../../settingGame';\r\n\r\n// styled-components\r\nimport { StyledTetrisWrapper, StyledTetrisAlertContainer, StyledTetris } from '../../styles/StyledTetris';\r\n\r\n// custom hooks\r\n// useInterval hooks from https://overreacted.io/making-setinterval-declarative-with-react-hooks/\r\nimport { useInterval } from '../../../_hooks/useInterval';\r\nimport { useCurrent } from '../../../_hooks/useCurrent';\r\nimport { useBoard } from '../../../_hooks/useBoard';\r\nimport { useGameValues } from '../../../_hooks/useGameValues';\r\n\r\n// components\r\nimport Alert from '../Alert/Alert';\r\nimport Board from '../Board/Board';\r\nimport Display from '../Display/Display';\r\nimport Button from '../Button/Button';\r\n\r\nconst Tetris = () => {\r\n    const dispatch = useDispatch();\r\n    const tetris = useSelector((store) => store.tetris);\r\n\r\n    const [current, updateCurrentPos, resetCurrent] = useCurrent();\r\n    const [board, setBoard, rowsCleared, isIE] = useBoard(current, resetCurrent);\r\n    const [score, rows, level, setLevel] = useGameValues(rowsCleared);\r\n\r\n    const setBrowserAlert = () => {\r\n        console.log('setAlert clicked');\r\n        dispatch(actions.setIEAlert(!tetris.ieIEAlert));\r\n        console.log({ieAlert:tetris.ieAlert});\r\n    }\r\n\r\n    const moveCurrent = dir => {\r\n        if (!checkCollision(current, board, {x:dir, y:0})) {\r\n            updateCurrentPos({x:dir, y:0});\r\n        }\r\n    };\r\n\r\n    // set(reset) game\r\n    const startGame = () => {\r\n        setBoard(createBoard());\r\n        resetCurrent();\r\n        \r\n        dispatch(actions.setDropTime(100));\r\n        dispatch(actions.setGameOver(false));\r\n        dispatch(actions.setScore(0));\r\n        dispatch(actions.setRows(0));\r\n        dispatch(actions.setLevel(0));\r\n        dispatch(actions.setBtnTitle('Re-Start Game'));\r\n    };\r\n\r\n    const drop = () => {\r\n        // increate level when cleared 10 rows\r\n        if (rows > (level + 1) * 10) {\r\n            dispatch(actions.setLevel(prev => prev + 1));\r\n            /// increase speed when level increased\r\n            dispatch(actions.setDropTime(tetris.dropTime / (level + 1) + 100));\r\n        }\r\n        \r\n        // not collided : to drop the block\r\n        if (!checkCollision(current, board, {x:0, y:1})) {\r\n            updateCurrentPos({x:0, y:1, collided: false});\r\n        \r\n        // collided : game over\r\n        } else {\r\n            // game over\r\n            if (current.pos.y < 1) {\r\n                console.log('gameOver');\r\n                dispatch(actions.setGameOver(true));\r\n                dispatch(actions.setDropTime(null));\r\n            }\r\n            updateCurrentPos({x:0, y:0, collided:true});\r\n        }\r\n    };\r\n\r\n    const move = (event) => {\r\n        // to get each cell size\r\n        var bounds = event.target.getBoundingClientRect();\r\n        var cellSize = bounds.width;\r\n\r\n        var board = document.getElementById('board');\r\n        // value of margin-left + padding-left from board\r\n        var offsetLeft = board.offsetLeft;\r\n        // to get board area\r\n        var offsetWidth = board.offsetWidth;\r\n\r\n        var clientX = event.clientX - offsetLeft;\r\n\r\n        if (!tetris.gameOver) {\r\n            if (clientX >= 0 && clientX < (offsetWidth - cellSize)) {\r\n                if (cellSize < (offsetWidth / BOARD_WIDTH)) {\r\n                    var mouseX = Math.round(clientX / cellSize);\r\n                    if (mouseX !== current.pos.x) {\r\n                        // to the left\r\n                        if (mouseX < current.pos.x) {\r\n                            moveCurrent(-1);\r\n                            \r\n                        // to the right\r\n                        } else if (mouseX > current.pos.x) {\r\n                            moveCurrent(1);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    useInterval(() => {\r\n        drop();\r\n    }, tetris.dropTime);\r\n\r\n    return (\r\n        <StyledTetrisWrapper role=\"button\" tabIndex=\"0\">\r\n            {/* alert for IE browser user */}\r\n            {isIE && <StyledTetrisAlertContainer>\r\n                {!tetris.ieAlert && \r\n                    <Alert  isIE={isIE}\r\n                            text={'Not working in IE. Try another browser.'} \r\n                            callback={setBrowserAlert} \r\n                            buttonTitle={'OK'} \r\n                    />\r\n                }\r\n            </StyledTetrisAlertContainer>}\r\n            <StyledTetris>\r\n                <Board id={'board'} board={board} callback={e => move(e)}/>\r\n                <aside>\r\n                    {tetris.gameOver && <Display gameOver={tetris.gameOver} text=\"Game Over\" />}\r\n                    {/* not showing in IE browser*/}\r\n                    {!isIE &&\r\n                        <React.Fragment>\r\n                            <Button callback={startGame} title={tetris.btnTitle} />\r\n                            <Display text={tetris.gameOver ? (`Final-Score: ${score}`):(`Score: ${score}`)} />\r\n                            <Display text={tetris.gameOver ? (`Final-Rows: ${rows}`):(`Rows: ${rows}`)} />\r\n                            <Display text={tetris.gameOver ? (`Final-Level: ${level}`):(`Level: ${level}`)} />\r\n                        </React.Fragment>\r\n                    }\r\n                    {/* only showing in IE browser */}\r\n                    {(isIE && tetris.ieAlert) &&<Button callback={setBrowserAlert} title={tetris.btnTitle} />}\r\n                </aside>\r\n            </StyledTetris>\r\n        </StyledTetrisWrapper>\r\n    );\r\n};\r\n\r\nexport default Tetris;"]},"metadata":{},"sourceType":"module"}