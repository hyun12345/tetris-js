{"ast":null,"code":"import _objectSpread from \"C:/jah-workspace/tetris-js/react-js/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { combineReducers } from 'redux';\nimport { SET_DROPTIME, SET_GAMEOVER, SET_ISIE, SET_BTNTITLE, SET_CLOSEIEALERT, SET_CURRENT // SET_BOARD,\n// SET_ROWSCLEARED,\n// SET_SCORE, \n// SET_ROWS, \n// SET_LEVEL, \n} from '../_actions/types';\nimport { checkIsIE, closeIEAlert } from '../settingGame';\nimport { TETROMINOS } from '../tetrominos'; // import { checkIsIE, closeIEAlert, createBoard } from '../settingGame';\n//  setting default state value\n\nvar initialState = {\n  dropTime: null,\n  gameOver: false,\n  btnTitle: 'Start Game',\n  isIE: checkIsIE(),\n  closeIEAlert: closeIEAlert(),\n  current: {\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    collided: false\n  } // board: createBoard(),\n  // rowsCleared: 0,\n  // score: 0,\n  // rows: 0,\n  // level: 0,\n\n};\n\nvar tetris = function tetris() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_DROPTIME:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        dropTime: action.payload\n      });\n\n    case SET_GAMEOVER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        gameOver: action.payload\n      });\n\n    case SET_BTNTITLE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        btnTitle: action.payload\n      });\n\n    case SET_ISIE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isIE: action.payload\n      });\n\n    case SET_CLOSEIEALERT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        closeIEAlert: action.payload\n      });\n\n    case SET_CURRENT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        current: action.payload\n      });\n    // case SET_BOARD:\n    //     return {...state, board: action.payload}\n    // case SET_ROWSCLEARED:\n    //     return {...state, rowsCleared: action.payload}\n    // case SET_SCORE:\n    //     return {...state, score: action.payload}\n    // case SET_ROWS:\n    //     return { ...state, rows: action.payload}\n    // case SET_LEVEL:\n    //     return {...state, level: action.payload}\n\n    default:\n      return state;\n  }\n};\n\nvar tetrisReducer = combineReducers({\n  tetris: tetris\n});\nexport default tetrisReducer;","map":{"version":3,"sources":["C:/jah-workspace/tetris-js/react-js/src/_reducers/index.js"],"names":["combineReducers","SET_DROPTIME","SET_GAMEOVER","SET_ISIE","SET_BTNTITLE","SET_CLOSEIEALERT","SET_CURRENT","checkIsIE","closeIEAlert","TETROMINOS","initialState","dropTime","gameOver","btnTitle","isIE","current","pos","x","y","tetromino","shape","collided","tetris","state","action","type","payload","tetrisReducer"],"mappings":";AAAA,SAASA,eAAT,QAAgC,OAAhC;AAEA,SACIC,YADJ,EAEIC,YAFJ,EAGIC,QAHJ,EAIIC,YAJJ,EAKIC,gBALJ,EAMIC,WANJ,CAOI;AACA;AACA;AACA;AACA;AAXJ,OAYQ,mBAZR;AAcA,SAASC,SAAT,EAAoBC,YAApB,QAAwC,gBAAxC;AACA,SAASC,UAAT,QAA2B,eAA3B,C,CAEA;AAEA;;AACA,IAAMC,YAAY,GAAG;AAEjBC,EAAAA,QAAQ,EAAE,IAFO;AAGjBC,EAAAA,QAAQ,EAAE,KAHO;AAIjBC,EAAAA,QAAQ,EAAE,YAJO;AAKjBC,EAAAA,IAAI,EAAEP,SAAS,EALE;AAMjBC,EAAAA,YAAY,EAAEA,YAAY,EANT;AAOjBO,EAAAA,OAAO,EAAE;AACLC,IAAAA,GAAG,EAAE;AAAEC,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE;AAAX,KADA;AAELC,IAAAA,SAAS,EAAEV,UAAU,CAAC,CAAD,CAAV,CAAcW,KAFpB;AAGLC,IAAAA,QAAQ,EAAE;AAHL,GAPQ,CAYjB;AACA;AACA;AACA;AACA;;AAhBiB,CAArB;;AAmBA,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBb,YAAyB;AAAA,MAAXc,MAAW;;AAC7C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKxB,YAAL;AACI,6CAAWsB,KAAX;AAAkBZ,QAAAA,QAAQ,EAAEa,MAAM,CAACE;AAAnC;;AACJ,SAAKxB,YAAL;AACI,6CAAWqB,KAAX;AAAkBX,QAAAA,QAAQ,EAAEY,MAAM,CAACE;AAAnC;;AACJ,SAAKtB,YAAL;AACI,6CAAWmB,KAAX;AAAkBV,QAAAA,QAAQ,EAAEW,MAAM,CAACE;AAAnC;;AACJ,SAAKvB,QAAL;AACI,6CAAWoB,KAAX;AAAkBT,QAAAA,IAAI,EAAEU,MAAM,CAACE;AAA/B;;AACJ,SAAKrB,gBAAL;AACI,6CAAWkB,KAAX;AAAkBf,QAAAA,YAAY,EAAEgB,MAAM,CAACE;AAAvC;;AACJ,SAAKpB,WAAL;AACI,6CAAWiB,KAAX;AAAkBR,QAAAA,OAAO,EAAES,MAAM,CAACE;AAAlC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACI,aAAOH,KAAP;AAxBR;AA0BH,CA3BD;;AA6BA,IAAMI,aAAa,GAAG3B,eAAe,CAAC;AAClCsB,EAAAA,MAAM,EAANA;AADkC,CAAD,CAArC;AAIA,eAAeK,aAAf","sourcesContent":["import { combineReducers } from 'redux';\r\n\r\nimport { \r\n    SET_DROPTIME, \r\n    SET_GAMEOVER, \r\n    SET_ISIE,\r\n    SET_BTNTITLE,\r\n    SET_CLOSEIEALERT,\r\n    SET_CURRENT,\r\n    // SET_BOARD,\r\n    // SET_ROWSCLEARED,\r\n    // SET_SCORE, \r\n    // SET_ROWS, \r\n    // SET_LEVEL, \r\n } from '../_actions/types';\r\n\r\nimport { checkIsIE, closeIEAlert } from '../settingGame';\r\nimport { TETROMINOS } from '../tetrominos';\r\n\r\n// import { checkIsIE, closeIEAlert, createBoard } from '../settingGame';\r\n\r\n//  setting default state value\r\nconst initialState = {\r\n\r\n    dropTime: null,\r\n    gameOver: false,\r\n    btnTitle: 'Start Game',\r\n    isIE: checkIsIE(),\r\n    closeIEAlert: closeIEAlert(),\r\n    current: {\r\n        pos: { x: 0, y: 0 },\r\n        tetromino: TETROMINOS[0].shape,\r\n        collided: false,\r\n    },\r\n    // board: createBoard(),\r\n    // rowsCleared: 0,\r\n    // score: 0,\r\n    // rows: 0,\r\n    // level: 0,\r\n}\r\n\r\nconst tetris = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case SET_DROPTIME:\r\n            return {...state, dropTime: action.payload}\r\n        case SET_GAMEOVER:\r\n            return {...state, gameOver: action.payload}\r\n        case SET_BTNTITLE:\r\n            return {...state, btnTitle: action.payload}\r\n        case SET_ISIE:\r\n            return {...state, isIE: action.payload}\r\n        case SET_CLOSEIEALERT:\r\n            return {...state, closeIEAlert: action.payload}\r\n        case SET_CURRENT:\r\n            return {...state, current: action.payload}\r\n        // case SET_BOARD:\r\n        //     return {...state, board: action.payload}\r\n        // case SET_ROWSCLEARED:\r\n        //     return {...state, rowsCleared: action.payload}\r\n        // case SET_SCORE:\r\n        //     return {...state, score: action.payload}\r\n        // case SET_ROWS:\r\n        //     return { ...state, rows: action.payload}\r\n        // case SET_LEVEL:\r\n        //     return {...state, level: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst tetrisReducer = combineReducers({\r\n    tetris,\r\n});\r\n\r\nexport default tetrisReducer;"]},"metadata":{},"sourceType":"module"}