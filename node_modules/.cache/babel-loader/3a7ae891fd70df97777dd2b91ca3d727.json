{"ast":null,"code":"import _objectSpread from \"C:/jah-workspace/tetris-js/react-js/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { combineReducers } from 'redux';\nimport { SET_SCORE, SET_ROWS, SET_LEVEL, SET_DROPTIME, SET_GAMEOVER, SET_ISIE, SET_BTNTITLE, SET_CLOSEIEALERT, SET_CURRENT, SET_BOARD, SET_ROWSCLEARED } from '../_actions/types';\nimport { checkIsIE, closeIEAlert } from '../settingGame'; // import { useCurrent } from '../_hooks/useCurrent';\n// import { useBoard } from '../_hooks/useBoard';\n// import { useGameValues } from '../_hooks/useGameValues';\n// const [current, updateCurrentPos, resetCurrent] = useCurrent();\n// const [board, setBoard, rowsCleared] = useBoard(current, resetCurrent);\n// const [score, setScore, rows, setRows, level, setLevel] = useGameValues(rowsCleared);\n//  setting default state value\n\nvar initialState = {\n  score: 0,\n  rows: 0,\n  level: 0,\n  dropTime: null,\n  gameOver: false,\n  btnTitle: 'Start Game',\n  isIE: checkIsIE(),\n  closeIEAlert: closeIEAlert(),\n  current: {},\n  board: {},\n  rowsCleared: 0\n};\n\nvar tetris = function tetris() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_SCORE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        score: action.payload\n      });\n\n    case SET_ROWS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        rows: action.payload\n      });\n\n    case SET_LEVEL:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        level: action.payload\n      });\n\n    case SET_DROPTIME:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        dropTime: action.payload\n      });\n\n    case SET_GAMEOVER:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        gameOver: action.payload\n      });\n\n    case SET_BTNTITLE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        btnTitle: action.payload\n      });\n\n    case SET_ISIE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isIE: action.payload\n      });\n\n    case SET_CLOSEIEALERT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        closeIEAlert: action.payload\n      });\n\n    case SET_CURRENT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        current: action.payload\n      });\n\n    case SET_BOARD:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        board: action.payload\n      });\n\n    case SET_ROWSCLEARED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        rowsCleared: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar tetrisReducer = combineReducers({\n  tetris: tetris\n});\nexport default tetrisReducer;","map":{"version":3,"sources":["C:/jah-workspace/tetris-js/react-js/src/_reducers/index.js"],"names":["combineReducers","SET_SCORE","SET_ROWS","SET_LEVEL","SET_DROPTIME","SET_GAMEOVER","SET_ISIE","SET_BTNTITLE","SET_CLOSEIEALERT","SET_CURRENT","SET_BOARD","SET_ROWSCLEARED","checkIsIE","closeIEAlert","initialState","score","rows","level","dropTime","gameOver","btnTitle","isIE","current","board","rowsCleared","tetris","state","action","type","payload","tetrisReducer"],"mappings":";AAAA,SAASA,eAAT,QAAgC,OAAhC;AAEA,SACIC,SADJ,EAEIC,QAFJ,EAGIC,SAHJ,EAIIC,YAJJ,EAKIC,YALJ,EAMIC,QANJ,EAOIC,YAPJ,EAQIC,gBARJ,EASIC,WATJ,EAUIC,SAVJ,EAWIC,eAXJ,QAYQ,mBAZR;AAcA,SAASC,SAAT,EAAoBC,YAApB,QAAuC,gBAAvC,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AACA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,CADU;AAEjBC,EAAAA,IAAI,EAAE,CAFW;AAGjBC,EAAAA,KAAK,EAAE,CAHU;AAIjBC,EAAAA,QAAQ,EAAE,IAJO;AAKjBC,EAAAA,QAAQ,EAAE,KALO;AAMjBC,EAAAA,QAAQ,EAAE,YANO;AAOjBC,EAAAA,IAAI,EAAET,SAAS,EAPE;AAQjBC,EAAAA,YAAY,EAAEA,YAAY,EART;AASjBS,EAAAA,OAAO,EAAC,EATS;AAUjBC,EAAAA,KAAK,EAAC,EAVW;AAWjBC,EAAAA,WAAW,EAAE;AAXI,CAArB;;AAcA,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBZ,YAAyB;AAAA,MAAXa,MAAW;;AAC7C,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK3B,SAAL;AACI,6CAAWyB,KAAX;AAAkBX,QAAAA,KAAK,EAAEY,MAAM,CAACE;AAAhC;;AACJ,SAAK3B,QAAL;AACI,6CAAYwB,KAAZ;AAAmBV,QAAAA,IAAI,EAAEW,MAAM,CAACE;AAAhC;;AACJ,SAAK1B,SAAL;AACI,6CAAWuB,KAAX;AAAkBT,QAAAA,KAAK,EAAEU,MAAM,CAACE;AAAhC;;AACJ,SAAKzB,YAAL;AACI,6CAAWsB,KAAX;AAAkBR,QAAAA,QAAQ,EAAES,MAAM,CAACE;AAAnC;;AACJ,SAAKxB,YAAL;AACI,6CAAWqB,KAAX;AAAkBP,QAAAA,QAAQ,EAAEQ,MAAM,CAACE;AAAnC;;AACJ,SAAKtB,YAAL;AACI,6CAAWmB,KAAX;AAAkBN,QAAAA,QAAQ,EAAEO,MAAM,CAACE;AAAnC;;AACJ,SAAKvB,QAAL;AACI,6CAAWoB,KAAX;AAAkBL,QAAAA,IAAI,EAAEM,MAAM,CAACE;AAA/B;;AACJ,SAAKrB,gBAAL;AACI,6CAAWkB,KAAX;AAAkBb,QAAAA,YAAY,EAAEc,MAAM,CAACE;AAAvC;;AACJ,SAAKpB,WAAL;AACI,6CAAWiB,KAAX;AAAkBJ,QAAAA,OAAO,EAAEK,MAAM,CAACE;AAAlC;;AACJ,SAAKnB,SAAL;AACI,6CAAWgB,KAAX;AAAkBH,QAAAA,KAAK,EAAEI,MAAM,CAACE;AAAhC;;AACJ,SAAKlB,eAAL;AACI,6CAAWe,KAAX;AAAkBF,QAAAA,WAAW,EAAEG,MAAM,CAACE;AAAtC;;AACJ;AACI,aAAOH,KAAP;AAxBR;AA0BH,CA3BD;;AA6BA,IAAMI,aAAa,GAAG9B,eAAe,CAAC;AAClCyB,EAAAA,MAAM,EAANA;AADkC,CAAD,CAArC;AAIA,eAAeK,aAAf","sourcesContent":["import { combineReducers } from 'redux';\r\n\r\nimport { \r\n    SET_SCORE, \r\n    SET_ROWS, \r\n    SET_LEVEL, \r\n    SET_DROPTIME, \r\n    SET_GAMEOVER, \r\n    SET_ISIE,\r\n    SET_BTNTITLE,\r\n    SET_CLOSEIEALERT,\r\n    SET_CURRENT,\r\n    SET_BOARD,\r\n    SET_ROWSCLEARED\r\n } from '../_actions/types';\r\n\r\nimport { checkIsIE, closeIEAlert} from '../settingGame';\r\n\r\n// import { useCurrent } from '../_hooks/useCurrent';\r\n// import { useBoard } from '../_hooks/useBoard';\r\n// import { useGameValues } from '../_hooks/useGameValues';\r\n\r\n// const [current, updateCurrentPos, resetCurrent] = useCurrent();\r\n// const [board, setBoard, rowsCleared] = useBoard(current, resetCurrent);\r\n// const [score, setScore, rows, setRows, level, setLevel] = useGameValues(rowsCleared);\r\n\r\n//  setting default state value\r\nconst initialState = {\r\n    score: 0,\r\n    rows: 0,\r\n    level: 0,\r\n    dropTime: null,\r\n    gameOver: false,\r\n    btnTitle: 'Start Game',\r\n    isIE: checkIsIE(),\r\n    closeIEAlert: closeIEAlert(),\r\n    current:{},\r\n    board:{},\r\n    rowsCleared: 0\r\n}\r\n\r\nconst tetris = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case SET_SCORE:\r\n            return {...state, score: action.payload}\r\n        case SET_ROWS:\r\n            return { ...state, rows: action.payload}\r\n        case SET_LEVEL:\r\n            return {...state, level: action.payload}\r\n        case SET_DROPTIME:\r\n            return {...state, dropTime: action.payload}\r\n        case SET_GAMEOVER:\r\n            return {...state, gameOver: action.payload}\r\n        case SET_BTNTITLE:\r\n            return {...state, btnTitle: action.payload}\r\n        case SET_ISIE:\r\n            return {...state, isIE: action.payload}\r\n        case SET_CLOSEIEALERT:\r\n            return {...state, closeIEAlert: action.payload}\r\n        case SET_CURRENT:\r\n            return {...state, current: action.payload}\r\n        case SET_BOARD:\r\n            return {...state, board: action.payload}\r\n        case SET_ROWSCLEARED:\r\n            return {...state, rowsCleared: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst tetrisReducer = combineReducers({\r\n    tetris,\r\n});\r\n\r\nexport default tetrisReducer;"]},"metadata":{},"sourceType":"module"}