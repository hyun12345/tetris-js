{"ast":null,"code":"import _slicedToArray from \"C:/jah-workspace/tetris-js/react-js/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\jah-workspace\\\\tetris-js\\\\react-js\\\\src\\\\components\\\\views\\\\Tetris\\\\Tetris.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { BOARD_WIDTH, createBoard, checkCollision } from '../../../settingGame'; // styled-components\n\nimport { StyledTetrisWrapper, StyledTetrisTitle, StyledTetris } from '../../styles/StyledTetris'; // custom hooks\n// useInterval hooks from https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useInterval } from '../../../_hooks/useInterval';\nimport { useCurrent } from '../../../_hooks/useCurrent';\nimport { useBoard } from '../../../_hooks/useBoard';\nimport { useGameValues } from '../../../_hooks/useGameValues'; // components\n\nimport Board from '../Board/Board';\nimport Display from '../Display/Display';\nimport Button from '../Button/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Tetris = function Tetris() {\n  _s();\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      dropTime = _useState2[0],\n      setDropTime = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      gameOver = _useState4[0],\n      setGameOver = _useState4[1];\n\n  var _useState5 = useState('Start Game'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      buttonTitle = _useState6[0],\n      setButtonTitle = _useState6[1];\n\n  var _useState7 = useState(buttonTitle),\n      _useState8 = _slicedToArray(_useState7, 2),\n      guide = _useState8[0],\n      setGuide = _useState8[1];\n\n  var _useCurrent = useCurrent(),\n      _useCurrent2 = _slicedToArray(_useCurrent, 3),\n      current = _useCurrent2[0],\n      updateCurrentPos = _useCurrent2[1],\n      resetCurrent = _useCurrent2[2];\n\n  var _useBoard = useBoard(current, resetCurrent),\n      _useBoard2 = _slicedToArray(_useBoard, 3),\n      board = _useBoard2[0],\n      setBoard = _useBoard2[1],\n      rowsCleared = _useBoard2[2];\n\n  var _useGameValues = useGameValues(rowsCleared),\n      _useGameValues2 = _slicedToArray(_useGameValues, 6),\n      score = _useGameValues2[0],\n      setScore = _useGameValues2[1],\n      rows = _useGameValues2[2],\n      setRows = _useGameValues2[3],\n      level = _useGameValues2[4],\n      setLevel = _useGameValues2[5];\n\n  var isIE = function isIE() {\n    return !!document.documentMode;\n  };\n\n  var moveCurrent = function moveCurrent(dir) {\n    if (!checkCollision(current, board, {\n      x: dir,\n      y: 0\n    })) {\n      updateCurrentPos({\n        x: dir,\n        y: 0\n      });\n    }\n  }; // set(reset) game\n\n\n  var startGame = function startGame() {\n    setBoard(createBoard());\n    setDropTime(100);\n    resetCurrent();\n    setGameOver(false);\n    setScore(0);\n    setRows(0);\n    setLevel(0);\n    setButtonTitle('Re-Start Game');\n    setGuide('Move Mouse on the board to the LEFT or RIGHT for moving block!');\n    console.log({\n      isIE: isIE()\n    });\n  };\n\n  var drop = function drop() {\n    // increate level when cleared 10 rows\n    if (rows > (level + 1) * 10) {\n      setLevel(function (prev) {\n        return prev + 1;\n      }); /// increase speed when level increased\n\n      setDropTime(dropTime / (level + 1) + 100);\n    } // not collided : to drop the block\n\n\n    if (!checkCollision(current, board, {\n      x: 0,\n      y: 1\n    })) {\n      updateCurrentPos({\n        x: 0,\n        y: 1,\n        collided: false\n      }); // collided : game over\n    } else {\n      // game over\n      if (current.pos.y < 1) {\n        console.log('gameOver');\n        setGameOver(true);\n        setDropTime(null);\n        setGuide(buttonTitle);\n      }\n\n      updateCurrentPos({\n        x: 0,\n        y: 0,\n        collided: true\n      });\n    }\n  };\n\n  var move = function move(event) {\n    // to get each cell size\n    var bounds = event.target.getBoundingClientRect();\n    var cellSize = bounds.width;\n    var board = document.getElementById('board'); // value of margin-left + padding-left from board\n\n    var offsetLeft = board.offsetLeft; // to get board area\n\n    var offsetWidth = board.offsetWidth;\n    var clientX = event.clientX - offsetLeft;\n\n    if (!gameOver) {\n      if (clientX >= 0 && clientX < offsetWidth - cellSize) {\n        if (cellSize < offsetWidth / BOARD_WIDTH) {\n          var currentMouse = Math.round(clientX / cellSize);\n\n          if (currentMouse !== current.pos.x) {\n            // to the left\n            if (currentMouse < current.pos.x) {\n              moveCurrent(-1); // to the right\n            } else if (currentMouse > current.pos.x) {\n              moveCurrent(1);\n            }\n          }\n        }\n      }\n    }\n  };\n\n  useInterval(function () {\n    drop();\n  }, dropTime);\n  return /*#__PURE__*/_jsxDEV(StyledTetrisWrapper, {\n    role: \"button\",\n    tabIndex: \"0\",\n    children: [/*#__PURE__*/_jsxDEV(StyledTetrisTitle, {\n      children: \"BLOCK-TETRIS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, _this), /*#__PURE__*/_jsxDEV(StyledTetris, {\n      children: [/*#__PURE__*/_jsxDEV(Board, {\n        id: 'board',\n        board: board,\n        callback: function callback(e) {\n          return move(e);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, _this), /*#__PURE__*/_jsxDEV(\"aside\", {\n        children: [gameOver && /*#__PURE__*/_jsxDEV(Display, {\n          gameOver: gameOver,\n          text: \"Game Over\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 34\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Display, {\n            text: gameOver ? \"Final-Score: \".concat(score) : \"Score: \".concat(score)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 25\n          }, _this), /*#__PURE__*/_jsxDEV(Display, {\n            text: gameOver ? \"Final-Rows: \".concat(rows) : \"Rows: \".concat(rows)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 25\n          }, _this), /*#__PURE__*/_jsxDEV(Display, {\n            text: gameOver ? \"Final-Level: \".concat(level) : \"Level: \".concat(level)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 25\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(Button, {\n          callback: startGame,\n          text: buttonTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, _this), /*#__PURE__*/_jsxDEV(Display, {\n          text: guide\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(Tetris, \"NbABym9iW6lzNcJDNHPr04QP1rs=\", false, function () {\n  return [useCurrent, useBoard, useGameValues, useInterval];\n});\n\n_c = Tetris;\nexport default Tetris;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tetris\");","map":{"version":3,"sources":["C:/jah-workspace/tetris-js/react-js/src/components/views/Tetris/Tetris.js"],"names":["React","useState","BOARD_WIDTH","createBoard","checkCollision","StyledTetrisWrapper","StyledTetrisTitle","StyledTetris","useInterval","useCurrent","useBoard","useGameValues","Board","Display","Button","Tetris","dropTime","setDropTime","gameOver","setGameOver","buttonTitle","setButtonTitle","guide","setGuide","current","updateCurrentPos","resetCurrent","board","setBoard","rowsCleared","score","setScore","rows","setRows","level","setLevel","isIE","document","documentMode","moveCurrent","dir","x","y","startGame","console","log","drop","prev","collided","pos","move","event","bounds","target","getBoundingClientRect","cellSize","width","getElementById","offsetLeft","offsetWidth","clientX","currentMouse","Math","round","e"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\n\r\nimport { BOARD_WIDTH, createBoard, checkCollision } from '../../../settingGame';\r\n\r\n// styled-components\r\nimport { StyledTetrisWrapper, StyledTetrisTitle, StyledTetris } from '../../styles/StyledTetris';\r\n\r\n// custom hooks\r\n// useInterval hooks from https://overreacted.io/making-setinterval-declarative-with-react-hooks/\r\nimport { useInterval } from '../../../_hooks/useInterval';\r\nimport { useCurrent } from '../../../_hooks/useCurrent';\r\nimport { useBoard } from '../../../_hooks/useBoard';\r\nimport { useGameValues } from '../../../_hooks/useGameValues';\r\n\r\n// components\r\nimport Board from '../Board/Board';\r\nimport Display from '../Display/Display';\r\nimport Button from '../Button/Button';\r\n\r\nconst Tetris = () => {\r\n    const [dropTime, setDropTime] = useState(null);\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [buttonTitle, setButtonTitle] = useState('Start Game');\r\n    const [guide, setGuide] = useState(buttonTitle);\r\n\r\n    const [current, updateCurrentPos, resetCurrent] = useCurrent();\r\n    const [board, setBoard, rowsCleared] = useBoard(current, resetCurrent);\r\n    const [score, setScore, rows, setRows, level, setLevel] = useGameValues(rowsCleared);\r\n\r\n\r\n    const isIE = () => {\r\n        return !!(document).documentMode;\r\n    };\r\n\r\n    const moveCurrent = dir => {\r\n        if (!checkCollision(current, board, {x:dir, y:0})) {\r\n            updateCurrentPos({x:dir, y:0});\r\n        }\r\n    };\r\n\r\n    // set(reset) game\r\n    const startGame = () => {\r\n        setBoard(createBoard());\r\n        setDropTime(100);\r\n        resetCurrent();\r\n        setGameOver(false);\r\n        setScore(0);\r\n        setRows(0);\r\n        setLevel(0);\r\n        setButtonTitle('Re-Start Game');\r\n        setGuide('Move Mouse on the board to the LEFT or RIGHT for moving block!');\r\n        console.log({isIE:isIE()});\r\n    };\r\n\r\n    const drop = () => {\r\n        // increate level when cleared 10 rows\r\n        if (rows > (level + 1) * 10) {\r\n            setLevel(prev => prev + 1);\r\n            /// increase speed when level increased\r\n            setDropTime(dropTime / (level + 1) + 100);\r\n        }\r\n        \r\n        // not collided : to drop the block\r\n        if (!checkCollision(current, board, {x:0, y:1})) {\r\n            updateCurrentPos({x:0, y:1, collided: false});\r\n        \r\n        // collided : game over\r\n        } else {\r\n            // game over\r\n            if (current.pos.y < 1) {\r\n                console.log('gameOver');\r\n                setGameOver(true);\r\n                setDropTime(null);\r\n                setGuide(buttonTitle);\r\n            }\r\n            updateCurrentPos({x:0, y:0, collided:true});\r\n        }\r\n    };\r\n\r\n    const move = (event) => {\r\n        // to get each cell size\r\n        var bounds = event.target.getBoundingClientRect();\r\n        var cellSize = bounds.width;\r\n\r\n        var board = document.getElementById('board');\r\n        // value of margin-left + padding-left from board\r\n        var offsetLeft = board.offsetLeft;\r\n        // to get board area\r\n        var offsetWidth = board.offsetWidth;\r\n\r\n        var clientX = event.clientX - offsetLeft;\r\n\r\n        if (!gameOver) {\r\n            if (clientX >= 0 && clientX < (offsetWidth - cellSize)) {\r\n                if (cellSize < (offsetWidth / BOARD_WIDTH)) {\r\n                    var currentMouse = Math.round(clientX / cellSize);\r\n                    if (currentMouse !== current.pos.x) {\r\n                        // to the left\r\n                        if (currentMouse < current.pos.x) {\r\n                            moveCurrent(-1);\r\n                            \r\n                        // to the right\r\n                        } else if (currentMouse > current.pos.x) {\r\n                            moveCurrent(1);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    useInterval(() => {\r\n        drop();\r\n    }, dropTime);\r\n\r\n    return (\r\n        <StyledTetrisWrapper role=\"button\" tabIndex=\"0\">\r\n            <StyledTetrisTitle>BLOCK-TETRIS</StyledTetrisTitle>\r\n            <StyledTetris>\r\n                <Board id={'board'} board={board} callback={e => move(e)}/>\r\n                <aside>\r\n                    {gameOver && <Display gameOver={gameOver} text=\"Game Over\" />}\r\n                    <div>\r\n                        <Display text={gameOver ? (`Final-Score: ${score}`):(`Score: ${score}`)} />\r\n                        <Display text={gameOver ? (`Final-Rows: ${rows}`):(`Rows: ${rows}`)} />\r\n                        <Display text={gameOver ? (`Final-Level: ${level}`):(`Level: ${level}`)} />\r\n                    </div>\r\n                    <Button callback={startGame} text={buttonTitle} />\r\n                    <Display text={guide} />\r\n                </aside>\r\n            </StyledTetris>\r\n        </StyledTetrisWrapper>\r\n    );\r\n};\r\n\r\nexport default Tetris;"]},"metadata":{},"sourceType":"module"}