{"ast":null,"code":"import _objectSpread from \"C:/jah-workspace/tetris-js/react-js/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:/jah-workspace/tetris-js/react-js/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useState, useCallback } from 'react';\nimport { BOARD_WIDTH } from '../settingGame';\nimport { TETROMINOS, setBlock } from '../tetrominos';\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as actions from '../_actions/index';\nexport var useCurrent = function useCurrent() {\n  _s();\n\n  // set default(board)\n  var _useState = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: TETROMINOS[0].shape,\n    collided: false\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      current = _useState2[0],\n      setCurrent = _useState2[1];\n\n  var dispatch = useDispatch();\n  var prevCurrent = useSelector(function (store) {\n    return store.tetris.current;\n  });\n\n  var updateCurrentPos = function updateCurrentPos(_ref) {\n    var x = _ref.x,\n        y = _ref.y,\n        collided = _ref.collided;\n    console.log({\n      x: x,\n      y: y,\n      collided: collided\n    });\n    dispatch(actions.setCurrent(function (prevCurrent) {\n      return _objectSpread(_objectSpread({}, prevCurrent), {}, {\n        pos: {\n          x: prevCurrent.pos.x += x,\n          y: prevCurrent.pos.y += y\n        },\n        collided: collided\n      });\n    }));\n    setCurrent(function (prev) {\n      return _objectSpread(_objectSpread({}, prev), {}, {\n        pos: {\n          x: prev.pos.x += x,\n          y: prev.pos.y += y\n        },\n        collided: collided\n      });\n    });\n  }; // reset\n\n\n  var resetCurrent = useCallback(function () {\n    // dispatch(actions.setCurrent({\n    //     // x result : set block position center of the board\n    //     pos: { x: ((BOARD_WIDTH / 2) - 1), y: 0 },\n    //     tetromino: setBlock().shape,\n    //     collided: false,\n    // }));\n    setCurrent({\n      // x result : set block position center of the board\n      pos: {\n        x: BOARD_WIDTH / 2 - 1,\n        y: 0\n      },\n      tetromino: setBlock().shape,\n      collided: false\n    });\n  }, []);\n  console.log({\n    current: current,\n    tetrisCurrent: tetris.current\n  });\n  return [current, updateCurrentPos, resetCurrent];\n};\n\n_s(useCurrent, \"Y2viM+BYOPvcDkM5maci7OCepb0=\", false, function () {\n  return [useDispatch, useSelector];\n});","map":{"version":3,"sources":["C:/jah-workspace/tetris-js/react-js/src/_hooks/useCurrent.js"],"names":["useState","useCallback","BOARD_WIDTH","TETROMINOS","setBlock","useSelector","useDispatch","actions","useCurrent","pos","x","y","tetromino","shape","collided","current","setCurrent","dispatch","prevCurrent","store","tetris","updateCurrentPos","console","log","prev","resetCurrent","tetrisCurrent"],"mappings":";;;;;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,eAArC;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAO,KAAKC,OAAZ,MAAyB,mBAAzB;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAAA;;AAC5B;AACA,kBAA8BR,QAAQ,CAAC;AACnCS,IAAAA,GAAG,EAAE;AAAEC,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE;AAAX,KAD8B;AAEnCC,IAAAA,SAAS,EAAET,UAAU,CAAC,CAAD,CAAV,CAAcU,KAFU;AAGnCC,IAAAA,QAAQ,EAAE;AAHyB,GAAD,CAAtC;AAAA;AAAA,MAAOC,OAAP;AAAA,MAAgBC,UAAhB;;AAMA,MAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACA,MAAMY,WAAW,GAAGb,WAAW,CAAC,UAACc,KAAD;AAAA,WAAWA,KAAK,CAACC,MAAN,CAAaL,OAAxB;AAAA,GAAD,CAA/B;;AAEA,MAAMM,gBAAgB,GAAG,SAAnBA,gBAAmB,OAAwB;AAAA,QAArBX,CAAqB,QAArBA,CAAqB;AAAA,QAAlBC,CAAkB,QAAlBA,CAAkB;AAAA,QAAfG,QAAe,QAAfA,QAAe;AAC7CQ,IAAAA,OAAO,CAACC,GAAR,CAAY;AAACb,MAAAA,CAAC,EAACA,CAAH;AAAMC,MAAAA,CAAC,EAACA,CAAR;AAAWG,MAAAA,QAAQ,EAACA;AAApB,KAAZ;AACAG,IAAAA,QAAQ,CAACV,OAAO,CAACS,UAAR,CAAmB,UAAAE,WAAW;AAAA,6CAChCA,WADgC;AAEnCT,QAAAA,GAAG,EAAE;AAAEC,UAAAA,CAAC,EAAGQ,WAAW,CAACT,GAAZ,CAAgBC,CAAhB,IAAqBA,CAA3B;AAA+BC,UAAAA,CAAC,EAAGO,WAAW,CAACT,GAAZ,CAAgBE,CAAhB,IAAqBA;AAAxD,SAF8B;AAGnCG,QAAAA,QAAQ,EAARA;AAHmC;AAAA,KAA9B,CAAD,CAAR;AAKAE,IAAAA,UAAU,CAAC,UAAAQ,IAAI;AAAA,6CACRA,IADQ;AAEXf,QAAAA,GAAG,EAAE;AAAEC,UAAAA,CAAC,EAAGc,IAAI,CAACf,GAAL,CAASC,CAAT,IAAcA,CAApB;AAAwBC,UAAAA,CAAC,EAAGa,IAAI,CAACf,GAAL,CAASE,CAAT,IAAcA;AAA1C,SAFM;AAGXG,QAAAA,QAAQ,EAARA;AAHW;AAAA,KAAL,CAAV;AAKH,GAZD,CAX4B,CAyB5B;;;AACA,MAAMW,YAAY,GAAGxB,WAAW,CAAC,YAAM;AACnC;AACA;AACA;AACA;AACA;AACA;AACAe,IAAAA,UAAU,CAAC;AACP;AACAP,MAAAA,GAAG,EAAE;AAAEC,QAAAA,CAAC,EAAIR,WAAW,GAAG,CAAf,GAAoB,CAA1B;AAA8BS,QAAAA,CAAC,EAAE;AAAjC,OAFE;AAGPC,MAAAA,SAAS,EAAER,QAAQ,GAAGS,KAHf;AAIPC,MAAAA,QAAQ,EAAE;AAJH,KAAD,CAAV;AAMH,GAb+B,EAa7B,EAb6B,CAAhC;AAeAQ,EAAAA,OAAO,CAACC,GAAR,CAAY;AAACR,IAAAA,OAAO,EAACA,OAAT;AAAkBW,IAAAA,aAAa,EAACN,MAAM,CAACL;AAAvC,GAAZ;AAEA,SAAO,CAACA,OAAD,EAAUM,gBAAV,EAA4BI,YAA5B,CAAP;AACH,CA5CM;;GAAMjB,U;UAQQF,W,EACGD,W","sourcesContent":["import { useState, useCallback } from 'react';\r\nimport { BOARD_WIDTH } from '../settingGame';\r\nimport { TETROMINOS, setBlock } from '../tetrominos';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as actions from '../_actions/index';\r\n\r\nexport const useCurrent = () => {\r\n    // set default(board)\r\n    const [current, setCurrent] = useState({\r\n        pos: { x: 0, y: 0 },\r\n        tetromino: TETROMINOS[0].shape,\r\n        collided: false,\r\n    });\r\n\r\n    const dispatch = useDispatch();\r\n    const prevCurrent = useSelector((store) => store.tetris.current);\r\n\r\n    const updateCurrentPos = ({ x, y, collided }) => {\r\n        console.log({x:x, y:y, collided:collided});\r\n        dispatch(actions.setCurrent(prevCurrent => ({\r\n            ...prevCurrent,\r\n            pos: { x: (prevCurrent.pos.x += x), y: (prevCurrent.pos.y += y) },\r\n            collided,\r\n        })));\r\n        setCurrent(prev => ({\r\n            ...prev,\r\n            pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n            collided,\r\n        }));\r\n    };\r\n\r\n    // reset\r\n    const resetCurrent = useCallback(() => {\r\n        // dispatch(actions.setCurrent({\r\n        //     // x result : set block position center of the board\r\n        //     pos: { x: ((BOARD_WIDTH / 2) - 1), y: 0 },\r\n        //     tetromino: setBlock().shape,\r\n        //     collided: false,\r\n        // }));\r\n        setCurrent({\r\n            // x result : set block position center of the board\r\n            pos: { x: ((BOARD_WIDTH / 2) - 1), y: 0 },\r\n            tetromino: setBlock().shape,\r\n            collided: false,\r\n        });\r\n    }, []);\r\n\r\n    console.log({current:current, tetrisCurrent:tetris.current});\r\n\r\n    return [current, updateCurrentPos, resetCurrent];\r\n};\r\n"]},"metadata":{},"sourceType":"module"}