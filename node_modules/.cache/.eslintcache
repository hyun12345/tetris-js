[{"C:\\jah-workspace\\tetris-js\\src\\index.js":"1","C:\\jah-workspace\\tetris-js\\src\\App.js":"2","C:\\jah-workspace\\tetris-js\\src\\_reducers\\index.js":"3","C:\\jah-workspace\\tetris-js\\src\\components\\views\\Tetris\\Tetris.js":"4","C:\\jah-workspace\\tetris-js\\src\\tetrominos.js":"5","C:\\jah-workspace\\tetris-js\\src\\settingGame.js":"6","C:\\jah-workspace\\tetris-js\\src\\_actions\\types.js":"7","C:\\jah-workspace\\tetris-js\\src\\components\\views\\Display\\Display.js":"8","C:\\jah-workspace\\tetris-js\\src\\components\\views\\Button\\Button.js":"9","C:\\jah-workspace\\tetris-js\\src\\components\\views\\Board\\Board.js":"10","C:\\jah-workspace\\tetris-js\\src\\components\\views\\Alert\\Alert.js":"11","C:\\jah-workspace\\tetris-js\\src\\_hooks\\useGameValues.js":"12","C:\\jah-workspace\\tetris-js\\src\\components\\styles\\StyledButton.js":"13","C:\\jah-workspace\\tetris-js\\src\\components\\styles\\StyledDisplay.js":"14","C:\\jah-workspace\\tetris-js\\src\\components\\styles\\StyledBoard.js":"15","C:\\jah-workspace\\tetris-js\\src\\components\\views\\Cell\\Cell.js":"16","C:\\jah-workspace\\tetris-js\\src\\_actions\\index.js":"17","C:\\jah-workspace\\tetris-js\\src\\_hooks\\useBoard.js":"18","C:\\jah-workspace\\tetris-js\\src\\_hooks\\useInterval.js":"19","C:\\jah-workspace\\tetris-js\\src\\_hooks\\useCurrent.js":"20","C:\\jah-workspace\\tetris-js\\src\\components\\styles\\StyledTetris.js":"21","C:\\jah-workspace\\tetris-js\\src\\components\\styles\\StyledCell.js":"22"},{"size":266,"mtime":1632350979817,"results":"23","hashOfConfig":"24"},{"size":353,"mtime":1632350976953,"results":"25","hashOfConfig":"24"},{"size":1954,"mtime":1632370084734,"results":"26","hashOfConfig":"24"},{"size":5957,"mtime":1632372360446,"results":"27","hashOfConfig":"24"},{"size":316,"mtime":1632350976966,"results":"28","hashOfConfig":"24"},{"size":1382,"mtime":1632357689130,"results":"29","hashOfConfig":"24"},{"size":471,"mtime":1632370084734,"results":"30","hashOfConfig":"24"},{"size":224,"mtime":1632350979836,"results":"31","hashOfConfig":"24"},{"size":237,"mtime":1632350979847,"results":"32","hashOfConfig":"24"},{"size":391,"mtime":1632350979853,"results":"33","hashOfConfig":"24"},{"size":389,"mtime":1632350979858,"results":"34","hashOfConfig":"24"},{"size":1251,"mtime":1632373229438,"results":"35","hashOfConfig":"24"},{"size":903,"mtime":1632350979886,"results":"36","hashOfConfig":"24"},{"size":1132,"mtime":1632350979870,"results":"37","hashOfConfig":"24"},{"size":630,"mtime":1632350979893,"results":"38","hashOfConfig":"24"},{"size":265,"mtime":1632370564177,"results":"39","hashOfConfig":"24"},{"size":1549,"mtime":1632370084734,"results":"40","hashOfConfig":"24"},{"size":2422,"mtime":1632373524336,"results":"41","hashOfConfig":"24"},{"size":548,"mtime":1632350979900,"results":"42","hashOfConfig":"24"},{"size":1085,"mtime":1632372604225,"results":"43","hashOfConfig":"24"},{"size":983,"mtime":1632350979864,"results":"44","hashOfConfig":"24"},{"size":487,"mtime":1632350979879,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1rhiil3",{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\jah-workspace\\tetris-js\\src\\index.js",[],"C:\\jah-workspace\\tetris-js\\src\\App.js",[],"C:\\jah-workspace\\tetris-js\\src\\_reducers\\index.js",[],"C:\\jah-workspace\\tetris-js\\src\\components\\views\\Tetris\\Tetris.js",[],"C:\\jah-workspace\\tetris-js\\src\\tetrominos.js",[],"C:\\jah-workspace\\tetris-js\\src\\settingGame.js",[],"C:\\jah-workspace\\tetris-js\\src\\_actions\\types.js",[],"C:\\jah-workspace\\tetris-js\\src\\components\\views\\Display\\Display.js",[],"C:\\jah-workspace\\tetris-js\\src\\components\\views\\Button\\Button.js",[],"C:\\jah-workspace\\tetris-js\\src\\components\\views\\Board\\Board.js",[],"C:\\jah-workspace\\tetris-js\\src\\components\\views\\Alert\\Alert.js",[],"C:\\jah-workspace\\tetris-js\\src\\_hooks\\useGameValues.js",["92"],"import { useEffect, useCallback, useMemo } from 'react';\r\n\r\n// using react-redux\r\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\r\nimport * as actions from '../_actions/index';\r\n\r\nexport const useGameValues = () => {\r\n    const dispatch = useDispatch();\r\n    const { rowsCleared } = useSelector((store) => ({rowsCleared:store.tetris.rowsCleared}), shallowEqual);\r\n    const { score } = useSelector((store) => ({score:store.tetris.score}), shallowEqual);\r\n    const { rows } = useSelector((store) => ({rows:store.tetris.rows}), shallowEqual);\r\n    const { level } = useSelector((store) => ({level:store.tetris.level}), shallowEqual);\r\n\r\n    // original tetris game score\r\n    const linePoints = useMemo(() => {\r\n        return [40, 100, 300, 1200];\r\n    }, []);\r\n\r\n    const calcScore = useCallback(() => {\r\n        // if have score\r\n        if (rowsCleared > 0) {\r\n            // original tetrigs game score calculated\r\n            dispatch(actions.setScore(score + linePoints[rowsCleared - 1] * (level + 1)));\r\n            dispatch(actions.setRows(rows + rowsCleared));\r\n        }\r\n    }, [linePoints, rowsCleared, level, dispatch]);\r\n\r\n    useEffect(() => {\r\n        calcScore();\r\n    }, [calcScore, rowsCleared, score]);\r\n};\r\n","C:\\jah-workspace\\tetris-js\\src\\components\\styles\\StyledButton.js",[],"C:\\jah-workspace\\tetris-js\\src\\components\\styles\\StyledDisplay.js",[],"C:\\jah-workspace\\tetris-js\\src\\components\\styles\\StyledBoard.js",[],"C:\\jah-workspace\\tetris-js\\src\\components\\views\\Cell\\Cell.js",[],"C:\\jah-workspace\\tetris-js\\src\\_actions\\index.js",[],"C:\\jah-workspace\\tetris-js\\src\\_hooks\\useBoard.js",["93"],"import { useEffect } from 'react';\r\n\r\n// using react-redux\r\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\r\nimport * as actions from '../_actions/index';\r\n\r\nexport const useBoard = (gameOver, btnTitle, resetCurrent) => {\r\n    const dispatch = useDispatch();\r\n    const { current } = useSelector((store) => ({current:store.tetris.current}), shallowEqual);\r\n    const { board } = useSelector((store) => ({board:store.tetris.board}), shallowEqual);\r\n    const { rowsCleared } = useSelector((store) => ({rowsCleared:store.tetris.rowsCleared}), shallowEqual);\r\n\r\n    useEffect(() => {\r\n        dispatch(actions.setRowsCleared(0));\r\n        const sweepRows = newBoard =>\r\n            // acc : accumulator\r\n            newBoard.reduce((acc, row) => {\r\n                if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n                    // block has two rows so have to add 2\r\n                    dispatch(actions.setRowsCleared(rowsCleared + 2));\r\n                    acc.unshift(new Array(newBoard[0].length).fill([0, 'clear']));\r\n                    return acc;\r\n                }\r\n                acc.push(row);\r\n                return acc;\r\n            }, []);\r\n\r\n        // compare with prevBoard\r\n        const updateBoard = prevBoard => {\r\n            // 1 : flush the board\r\n            const newBoard = prevBoard.map(row =>\r\n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\r\n            );\r\n\r\n            // 2 : draw tetromino\r\n            current.tetromino.forEach((row, y) => {\r\n                row.forEach((value, x) => {\r\n                    if (value !== 0) {\r\n                        newBoard[y + current.pos.y][x + current.pos.x] = [value, `${current.collided ? 'merged' : 'clear'}`,];\r\n                    }\r\n                });\r\n            });\r\n            \r\n            // check if collided or not\r\n            if (current.collided) {\r\n                // if last block not touched the top\r\n                if (current.pos.y > 0) {\r\n                    resetCurrent();\r\n                    return sweepRows(newBoard);\r\n                }\r\n            }\r\n            return newBoard;\r\n        };\r\n\r\n        // update board only when game playing(block droping)\r\n        if (!gameOver && btnTitle !== 'Start Game') {\r\n            dispatch(actions.setBoard(updateBoard(board)));\r\n        }\r\n    }, [current, resetCurrent, dispatch, gameOver, btnTitle]);\r\n};\r\n","C:\\jah-workspace\\tetris-js\\src\\_hooks\\useInterval.js",[],"C:\\jah-workspace\\tetris-js\\src\\_hooks\\useCurrent.js",[],"C:\\jah-workspace\\tetris-js\\src\\components\\styles\\StyledTetris.js",[],"C:\\jah-workspace\\tetris-js\\src\\components\\styles\\StyledCell.js",[],{"ruleId":"94","severity":1,"message":"95","line":26,"column":8,"nodeType":"96","endLine":26,"endColumn":50,"suggestions":"97"},{"ruleId":"94","severity":1,"message":"98","line":59,"column":8,"nodeType":"96","endLine":59,"endColumn":61,"suggestions":"99"},"react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'rows' and 'score'. Either include them or remove the dependency array.","ArrayExpression",["100"],"React Hook useEffect has missing dependencies: 'board' and 'rowsCleared'. Either include them or remove the dependency array.",["101"],{"desc":"102","fix":"103"},{"desc":"104","fix":"105"},"Update the dependencies array to be: [rowsCleared, dispatch, score, linePoints, level, rows]",{"range":"106","text":"107"},"Update the dependencies array to be: [current, resetCurrent, dispatch, gameOver, btnTitle, rowsCleared, board]",{"range":"108","text":"109"},[1112,1154],"[rowsCleared, dispatch, score, linePoints, level, rows]",[2361,2414],"[current, resetCurrent, dispatch, gameOver, btnTitle, rowsCleared, board]"]